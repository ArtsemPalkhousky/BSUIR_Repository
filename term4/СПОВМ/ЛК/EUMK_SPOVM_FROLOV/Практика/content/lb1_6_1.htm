<!-- (C) 2011-2012 V.Prytkov, V. Suponev, A.Uvarov. BSUIR -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<META HTTP-EQUIV="Content-Language" CONTENT="ru">
<title>Лабораторная работа №6. Файловая система. </title>
<base target="_top">
</HEAD><BODY>
<p align="center"><strong>Лабораторная работа  №6. Файловая система</strong></p>
<p align="center"><strong>Эмуляция файловой системы под заданную ОС (Windows либо Linux)</strong></p>
<p>Цель работы: ознакомиться с основами функционирования и проектирования файловых систем, разработать собственную файловую систему.</p>
<p align="center"><strong>Теоретическая часть</strong></p>
<p>Под файловой системой традиционно понимается способ хранения данных в виде файлов на жестком диске, внутренняя архитектура распределения
 данных, а также алгоритмы манипулирования файлами и их составными компонентами.</p>
<p>При проектировании файловой системы перед программистом обычно встают следующие проблемы:
<ul>
<li>необходимость поддержки иерархии размещения файлов и каталогов. Как правило, файлы хранятся в древовидной системе каталогов, которую 
надо спроецировать в физическое представление на конкретном носителе;</li>
<li>алгоритмы добавления, удаления, модификации файлов;</li>
<li>быстрый доступ как к описанию файлов (имя, атрибуты доступа и т.д.), так и к произвольным их участкам.</li>
</ul></p>
<p>На сегодняшний момент существует большое количество файловых систем как общего назначения, так и специализированных. Обычно их 
классифицируют следующим образом:
<ul>
<li>для носителей с произвольным доступом (жестким дискам). Примеры: ext2, ext3, ReiserFS, FAT32, NTFS, XFS... В Unix-системах обычно 
применяются первые три, использование FAT32 и NTFS характерно для ОС семейства Windows;</li>
<li>для носителей с последовательным доступом (магнитные ленты): QIC и др.;</li>
<li>для оптических носителей: ISO9660, ISO9690, HFS, UDF и др.;</li>
<li>виртуальные файловые системы: AEFS и др.;</li>
<li>сетевые файловые системы: NFS, SMBFS, SSHFS и др.</li>
</ul></p>
<p>В качестве примера рассмотрим основные принципы организации файловых систем Unix (ext2, ext3, ReiserFS и др.).</p>
<p>Основные компоненты физического представления файловой системы Unix:
<ul>
<li>суперблок – область на жестком диске, содержащая общую информацию о файловой системе;</li>
<li>массив индексных дескрипторов – содержит метаданные всех файлов файловой системы. Каждый индексный дескриптор (inode) содержит 
информацию о статусе файла и его размещении. Один дескриптор является корневым, и через него производится доступ ко всей структуре 
файловой системы. Размер массива дескрипторов фиксирован и задается при создании ФС;</li>
<li>блоки хранения данных – блоки, в которых непосредственно хранится содержимое файлов. Ссылки на блоки хранятся в индексном дескрипторе 
файла.</li>
</ul></p>
<p>В суперблоке хранится большое количество служебной информации. Особый интерес для нас представляет количество свободных блоков, 
количество свободных индексных дескрипторов, размер логического блока файловой системы,  список номеров свободных индексных дескрипторов и
 список адресов свободных блоков.</p>
<p>Два последних списка по понятным причинам могут занимать довольно большое пространство, поэтому их хранение непосредственно в суперблоке 
непрактично. Эти списки содержатся в отдельных блоках данных, на первый из которых имеется ссылка в суперблоке. Эти блоки организованы в 
виде списка; каждый блок, входящий в его состав, первым своим элементом указывает на следующий блок.</p>
<p>Индексный дескриптор ассоциирован с одним файлом и содержит его метаданные, т.е. информацию, которая может потребоваться для доступа 
к нему. Основной интерес для нас представляет физическое представление файла на жестком диске с учетом того, что файл может занимать 
довольно большой объем, т.е. дробиться на небольшие блоки данных.</p> 
<p>Каждый дескриптор содержит 13 указателей. Первые 10 указателей непосредственно ссылаются на блоки данных файла. Если файл большего 
размера - 11-ый указатель ссылается на первый косвенный блок (indirection block) из 128 (256) ссылок на блоки данных. Если и этого 
недостаточно, 12-ый указатель ссылается на дважды косвенный блок, содержащий 128 (256) ссылок на косвенные блоки. Наконец последний, 
13-ый указатель ссылается на трижды косвенный блок из 128 (256) ссылок на дважды косвенные блоки. Количество элементов в косвенном блоке 
зависит от его размера.</p>
<p>Следует отметить, что в Unix нет четкого разделения на файлы и директории. Индексный дескриптор файла содержит поле тип файла, в 
котором указывается, что именно представляет данный файл. В числе возможных вариантов этого поля обычный файл, директория, специальный 
файл устройства, канал (pipe), связь (link) или сокет.</p>
<p>Подобная архитектура файловой системы позволяет оптимальным образом разрешить перечисленные выше проблемы и получить быстрый и 
удобный доступ к файлам и директориям, а также их метаинформации.</p>
<p>Для получения полной картины о внутреннем устройстве файловых систем рекомендуется также ознакомиться с системами FAT32 и NTFS.</p>
<p align="center"><strong>Задание</strong></p>
<p>Разработать собственную файловую систему. Физический носитель в данном случае эмулируется файлом фиксированного размера. Архитектура 
файловой системы остается на усмотрение студента. В конечном результате должны быть реализованы следующие компоненты:
<ul>
<li>библиотека функций по добавлению, удалению и модификации файлов;</li>
<li>простой файловый менеджер, основанный на данной библиотеке.</li>
</ul></p>
<p>Все изменения, внесенные в файловую систему (иерархия директорий, файлы, их атрибуты), должны сохраняться в эмулирующем файле и быть 
доступными при последующем запуске приложения.</p>
</BODY>
</HTML>

