<!-- (C) 2011-2012 V.Prytkov, V. Suponev, A.Uvarov. BSUIR -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<META HTTP-EQUIV="Content-Language" CONTENT="ru">
<link rel="stylesheet" type="text/css" href="../css/style.css" />
<title>Лекция №15. Реализации  файловых систем.</title>
<base target="_top">
</HEAD><BODY>
  <p align="center"><strong>Реализации  файловых систем</strong></p>
  <p><em>Файловая  система FAT. Особенности и функциональные возможности файловой системы FAT.  Таблица размещения файлов. Структура загрузочной записи FAT16, FAT32. Хранение  длинных имен. Файловая система HPFS. Структура раздела HPFS, сбалансированные  двоичные деревья. Файловая система NTFS. Структура тома. Особенности системы  NTFS. Файловая система CD (ISO9660). Основной описатель тома. Рок-Ридж  расширения. Расширения Joliet. Базовая файловая система </em><em>UNIX</em><em>System</em><em>V</em><em>s</em><em>5</em><em>fs</em><em>. Индексные узлы. Суперблок. Файловая система </em><em>Berkeley</em><em>FFS</em><em>. Файловая  система </em><em>Linux</em><em>Ext</em><em>2</em><em>fs</em><em>. Файловая система </em><em>proc</em><em>. Файловая  система с журнальной структурой LFS</em></p>
  <p>ФС <strong>FAT</strong> стала  использоваться с появлением MS-DOS, и представляет собой улучшенную версию ФС  CP/M. Работает только на платформах с процессором x86, не поддерживала многозадачности  и использовала только реальный режим. В самой первой версии MS-DOS 1.0 FAT  содержала только корневой каталог, как и CP/M. В MS-DOS 2.0 ФС приобрела  иерархическую структуру, связи не допускались. В ФС FAT дисковое пространство  любого логического диска делится на две области: системную и область данных.  Системная создается и инициализируется при форматировании и обновляется при  манипулировании файловой структурой. Системная область включает: загрузочную  запись (boot record), зарезервированные сектора, таблицы FAT, корневой каталог,  содержащий не более 512 записей. Загрузочная запись для FAT16 занимает 1  сектор, для FAT32 &ndash; 3 сектора.<br />
    <strong>Структура  загрузочной записи</strong></p>
  <table border="1" cellspacing="0" cellpadding="0">
    <tr>
      <td width="40" valign="top"><br />
        Смещ, б </td>
      <td width="47" valign="top"><p>Длина, б</p></td>
      <td width="633" valign="top"><p>Содержимое поля FAT16 (32)</p></td>
    </tr>
    <tr>
      <td width="40" valign="top"><p>00h</p></td>
      <td width="47" valign="top"><p>3</p></td>
      <td width="633" valign="top"><p>jump 3eh, 2 байта безусловный переход на начало    загрузчика, 3 байт &ndash; операция NOP</p></td>
    </tr>
    <tr>
      <td width="40" valign="top"><p>03h</p></td>
      <td width="47" valign="top"><p>8</p></td>
      <td width="633" valign="top"><p>системный идентификатор, содержит инф. о фирме    разработчике и версии ОС</p></td>
    </tr>
    <tr>
      <td width="40" valign="top"><p>0bh</p></td>
      <td width="47" valign="top"><p>2</p></td>
      <td width="633" valign="top"><p>размер сектора, байт, отсюда начинается блок параметров    диска</p></td>
    </tr>
    <tr>
      <td width="40" valign="top"><p>0dh</p></td>
      <td width="47" valign="top"><p>1</p></td>
      <td width="633" valign="top"><p>число секторов в кластере</p></td>
    </tr>
    <tr>
      <td width="40" valign="top"><p>0eh</p></td>
      <td width="47" valign="top"><p>2</p></td>
      <td width="633" valign="top"><p>число зарезервированных секторов (для FAT32 содержит 32)</p></td>
    </tr>
    <tr>
      <td width="40" valign="top"><p>10h</p></td>
      <td width="47" valign="top"><p>1</p></td>
      <td width="633" valign="top"><p>число копий FAT</p></td>
    </tr>
    <tr>
      <td width="40" valign="top"><p>11h</p></td>
      <td width="47" valign="top"><p>2</p></td>
      <td width="633" valign="top"><p>максимальное число элементов корневого каталога (FAT32 -    0)</p></td>
    </tr>
    <tr>
      <td width="40" valign="top"><p>13h</p></td>
      <td width="47" valign="top"><p>2</p></td>
      <td width="633" valign="top"><p>число секторов на логическом диске, если его длина не выше    32 Mb, иначе 0 (FAT32 - 0)</p></td>
    </tr>
    <tr>
      <td width="40" valign="top"><p>15h</p></td>
      <td width="47" valign="top"><p>1</p></td>
      <td width="633" valign="top"><p>дескриптор носителя</p></td>
    </tr>
    <tr>
      <td width="40" valign="top"><p>16h</p></td>
      <td width="47" valign="top"><p>2</p></td>
      <td width="633" valign="top"><p>размер FAT, секторов (FAT32 - 0)</p></td>
    </tr>
    <tr>
      <td width="40" valign="top"><p>18h</p></td>
      <td width="47" valign="top"><p>2</p></td>
      <td width="633" valign="top"><p>число секторов на дорожке</p></td>
    </tr>
    <tr>
      <td width="40" valign="top"><p>1ah</p></td>
      <td width="47" valign="top"><p>2</p></td>
      <td width="633" valign="top"><p>число рабочих поверхностей</p></td>
    </tr>
    <tr>
      <td width="40" valign="top"><p>1ch</p></td>
      <td width="47" valign="top"><p>4</p></td>
      <td width="633" valign="top"><p>число скрытых секторов, располагающихся перед загрузочным    сектором. Значение используется для вычисления абсолютного смещения корневого    каталога и данных</p></td>
    </tr>
    <tr>
      <td width="40" valign="top"><p>20h</p></td>
      <td width="47" valign="top"><p>4</p></td>
      <td width="633" valign="top"><p>число секторов на логическом диске (для FAT16 если размер    больше 32 Mb)</p></td>
    </tr>
  </table>
  <p>FAT16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FAT32</p>
  <table border="1" cellspacing="0" cellpadding="0">
    <tr>
      <td width="38" valign="top"><br />
        24h </td>
      <td width="47" valign="top"><p>1</p></td>
      <td width="279" valign="top"><p>тип логического диска 00- гибкий, 80h-жесткий</p></td>
      <td width="42" valign="top"><p>24h</p></td>
      <td width="47" valign="top"><p>4</p></td>
      <td width="277" valign="top"><p>число секторов в таблице FAT</p></td>
    </tr>
    <tr>
      <td width="38" valign="top"><p>25h</p></td>
      <td width="47" valign="top"><p>1</p></td>
      <td width="279" valign="top"><p>резерв</p></td>
      <td width="42" valign="top"><p>28h</p></td>
      <td width="47" valign="top"><p>2</p></td>
      <td width="277" valign="top"><p>расширенные флаги</p></td>
    </tr>
    <tr>
      <td width="38" valign="top"><p>26h</p></td>
      <td width="47" valign="top"><p>1</p></td>
      <td width="279" valign="top"><p>маркер с кодом 29H</p></td>
      <td width="42" valign="top"><p>2ah</p></td>
      <td width="47" valign="top"><p>2</p></td>
      <td width="277" valign="top"><p>версия файловой системы</p></td>
    </tr>
    <tr>
      <td width="38" valign="top"><p>27h</p></td>
      <td width="47" valign="top"><p>4</p></td>
      <td width="279" valign="top"><p>серийный номер тома</p></td>
      <td width="42" valign="top"><p>2ch</p></td>
      <td width="47" valign="top"><p>4</p></td>
      <td width="277" valign="top"><p>№ кластера для 1 кластера корневого каталога</p></td>
    </tr>
    <tr>
      <td width="38" valign="top"><p>2bh</p></td>
      <td width="47" valign="top"><p>11</p></td>
      <td width="279" valign="top"><p>метка тома</p></td>
      <td width="42" valign="top"><p>34h</p></td>
      <td width="47" valign="top"><p>2</p></td>
      <td width="277" valign="top"><p>№ сектора с рез. копией загрузочного диска</p></td>
    </tr>
    <tr>
      <td width="38" valign="top"><p>36h</p></td>
      <td width="47" valign="top"><p>8</p></td>
      <td width="279" valign="top"><p>имя файловой системы</p></td>
      <td width="42" valign="top"><p>36h</p></td>
      <td width="47" valign="top"><p>12</p></td>
      <td width="277" valign="top"><p>резерв</p></td>
    </tr>
    <tr>
      <td width="38" valign="top"><p>3eh</p></td>
      <td width="47" valign="top"><p>&nbsp;</p></td>
      <td width="279" valign="top"><p>загрузчик</p></td>
      <td width="42" valign="top"><p>&nbsp;</p></td>
      <td width="47" valign="top"><p>&nbsp;</p></td>
      <td width="277" valign="top"><p>загрузчик</p></td>
    </tr>
    <tr>
      <td width="38" valign="top"><p>1feh</p></td>
      <td width="47" valign="top"><p>2</p></td>
      <td width="279" valign="top"><p>сигнатура (код aa55h)</p></td>
      <td width="42" valign="top"><p>&nbsp;</p></td>
      <td width="47" valign="top"><p>&nbsp;</p></td>
      <td width="277" valign="top"><p>&nbsp;</p></td>
    </tr>
  </table>
  <p>Область данных содержит файлы и каталоги, подчиненные  корневому. В отличие от системной области, она доступна через пользовательский  интерфейс ОС. Область данных разбивается на кластеры, представляющие собой один  или несколько смежных секторов (блоков 512 байт) логического диска. Файл  независимо от истинного размера занимает на диске целое число кластеров.  Максимальный размер раздела:<br />
    Размер кластера, Кб&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FAT12,  Мб&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FAT16, Mb&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FAT32, Tb <br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 128&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 256&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 512&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1024&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2048&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2<br />
  <strong>Структура  записи каталога</strong>: <br />
    № байт&nbsp;&nbsp;&nbsp;&nbsp; Назначение  в FAT16 (FAT32)</p>
  <p>0-10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Имя файла 8+3<br />
  11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;атрибуты файла: архивный, атрибут  каталога, атрибут тома, системный, скрытый, только для чтения<br />
  12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;резерв (совместимость с NT, обеспечения  отображения имен в правильном регистре)<br />
  13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; резерв<br />
    14-15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; резерв  (время создания файла)<br />
    16-17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; резерв  (дата создания файла)<br />
    18-19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; резерв  (дата последнего доступа)<br />
    20-21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; резерв  (старшее слово номера начального кластера в таблице FAT)<br />
    22-23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; время последней модификации<br />
    24-25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; дата последней модификации<br />
    26-27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; номер начального кластера в таблице FAT  (младшее слово номера начального кластера)<br />
    28-31&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; размер файла в байтах</p>
  <p>Поле времени разбивается на 5 бит секунд, 6 минут, 5 часов,  даты на 5 бит дня, 4 месяца и 7 бит года (-1980). Атрибут архивный определяет,  что файл был открыт программой так, что она имеет возможность изменять его  содержимое. Программы резервного копирования могут устанавливать этот бит в 0,  соответственно резервные копии создаются только для файлов с установленным  битом. Атрибут тома используется только для одного элемента корневого каталога,  в котором хранится имя дискового тома, он же используется для длинных имен. В  FAT32 поддерживаются длинные имена. Если имя файла не отвечает этому формату  8.3 (длиннее или используются недопустимые символы), то берутся первые 6  символов, при необходимости преобразуются в верхний регистр ASCII, добавляется  суффикс ~1. Если такое имя уже есть, то ~2, и т.д. Дополнительно удаляются  пробелы и лишние точки, ряд недопустимых символов преобразуется в подчеркивание.  Имя формата 8.3 хранится непосредственно в записи каталога. Длинное имя  хранится в одной или нескольких каталоговых записях, предшествующих записи с  форматом имени 8.3. Каждая такая запись содержит до 13 символов формата  unicode, элементы имени хранятся в обратном порядке:</p>
  <table border="1" cellspacing="0" cellpadding="0">
    <tr>
      <td width="66" valign="top"><br />
        № эл-та<br />
        1 байт </td>
      <td width="94" valign="top"><p>5 символов имени (10 байт)</p></td>
      <td width="76" valign="top"><p>Атрибуты, <br />
        1 байт</p></td>
      <td width="57" valign="top"><p>Резерв,<br />
        1 байт</p></td>
      <td width="85" valign="top"><p>Контрольная сумма, 1 байт</p></td>
      <td width="95" valign="top"><p>6 символов имени, (12 байт)</p></td>
      <td width="76" valign="top"><p>0, два байта</p></td>
      <td width="94" valign="top"><p>2 символа имени, (4 байта)</p></td>
    </tr>
    <tr>
      <td width="66" valign="top"><p>67</p></td>
      <td width="94" valign="top"><p>26-30</p></td>
      <td width="76" valign="top"><p>&nbsp;</p></td>
      <td width="57" valign="top"><p>&nbsp;</p></td>
      <td width="85" valign="top"><p>&nbsp;</p></td>
      <td width="95" valign="top"><p>31-36</p></td>
      <td width="76" valign="top"><p>&nbsp;</p></td>
      <td width="94" valign="top"><p>37-38</p></td>
    </tr>
    <tr>
      <td width="66" valign="top"><p>2</p></td>
      <td width="94" valign="top"><p>13-17</p></td>
      <td width="76" valign="top"><p>&nbsp;</p></td>
      <td width="57" valign="top"><p>&nbsp;</p></td>
      <td width="85" valign="top"><p>&nbsp;</p></td>
      <td width="95" valign="top"><p>18-23</p></td>
      <td width="76" valign="top"><p>&nbsp;</p></td>
      <td width="94" valign="top"><p>24-25</p></td>
    </tr>
    <tr>
      <td width="66" valign="top"><p>1</p></td>
      <td width="94" valign="top"><p>символы 0-4</p></td>
      <td width="76" valign="top"><p>&nbsp;</p></td>
      <td width="57" valign="top"><p>&nbsp;</p></td>
      <td width="85" valign="top"><p>&nbsp;</p></td>
      <td width="95" valign="top"><p>5-10</p></td>
      <td width="76" valign="top"><p>&nbsp;</p></td>
      <td width="94" valign="top"><p>11-12</p></td>
    </tr>
    <tr>
      <td width="643" colspan="8" valign="top"><p>Стандартная запись каталога в формате имени 8.3</p></td>
    </tr>
  </table>
  <p><img src="../images/1sem_theory_p14_clip_image001.gif" alt="1" width="233" height="174" hspace="12" align="right" />Поле  атрибутов для фрагментов длинного имени содержит код 0fh, который невозможен в  качестве комбинации атрибутов файла для стандартной записи каталога. Старые  программы записи с таким кодом интерпретируют как ошибочные и игнорируют.  Последняя запись, содержащая длинное имя, имеет номер+64. Кроме того, длина  имени+путь ограничена 260 символами вместо возможных 800. Поле контрольной  суммы призвано отследить следующую ситуацию. ПО MS-DOS удаляет файл с длинным  именем, соответствующая запись каталога будет свободной, записи содержащие  длинное имя останутся. Далее на это место будет помещена запись о новом файле.  При этом записи с длинным именем остались, т.к. MS-DOS их игнорирует.  Соответственно Win98 может отследить подобную ситуацию с вероятностью  обнаружения 255/256. Win98 не хранит в памяти всю FAT, а использует окно,  накладываемое на таблицу.<br />
    Таблица <strong>FAT</strong> связывает кластеры, принадлежащие одному и тому же файлу. Первый кластер файла  указан в каталоге, остальные &ndash; в таблице FAT.  Фактически таблица состоит из 2 байтовых (4 байтовых для FAT32) элементов, № элемента  соответствует кластеру с данным номером, элемент содержит номер следующего  кластера в цепочке кластеров, принадлежащих файлу. </p>
  <p>Номера кластеров 0 и 1 используются для системных целей, а  для данных доступны номера кластеров, начиная со 2. В системной области имеется  вторая копия FAT на случай сбоя первой, данные обновляются в обеих таблицах одновременно.  В FAT свободные кластеры помечаются кодом 0, таким образом не существует  отдельного списка свободных блоков. Диапазон номеров fff0-fff6 является  зарезервированным, сбойные &ndash; кодом ffF7, последние в файловой цепочке &ndash; кодом  ffFF. <br />
    <strong>FAT12</strong> занимала в ОЗУ 4096 элементов по 2 байта на элемент.  Поскольку MS-DOS поддерживала до 4 дисковых разделов на диске, то FAT12  максимально могла работать с дисками объемом 64Мб. В системе <strong>FAT16</strong> используется 16 бит для указания  номера кластера, соответственно возможно не более 64К кластеров или элементов  таблицы. FAT16 занимает в памяти 128Кб. При макс. разделе в 2Гб FAT16 могла  работать с дисками 8Гб. Первая версия Win95 использовала FAT12 и FAT16  стандарта MS-DOS, с именами файлов 8.3. с выходом Win 95 OEM SR2 появилась<strong> </strong>поддержка длинных имен и разработана <strong>FAT32</strong>. Реально используются 28  разрядный адрес. Исчезли ограничения на объем логического диска 2Гб, при этом  при той же емкости логического диска могут использоваться блоки (кластеры)  меньшего размера. FAT32 может перемещать корневой каталог и использовать  резервную копию загрузочной записи. Корневой каталог представлен в виде обычной  цепочки кластеров, и может находиться в любом месте диска, а не только в  системной области, что снимает ограничение предыдущих версий на 512 элементов.  Система может поддерживать диски емкостью до 4Тбайт.<br />
    Хотя FAT12 не  позволяет адресовать большой раздел, она используется Windows как формат для дискет. Если форматировать  раздел (том) объемом менее 16Мб для FAT утилитой  format или инструмента DiskManagement Windows  использует не FAT16,  а FAT12. Все FAT  резервируют первые 2 кластера тома и 16 последних.</p>
  <p>В Windows  используются следующие локальные драйвера файловых систем: Ntfs.sys (NTFS), fastfat.sys (FAT), cdfs.sys (файловая  система CD-ROM, только  для чтения поддерживает ISO-9660 и  расширения Joliet), udfs.sys (UDF  совместимая реализация OSTA &ndash; Optical Storage Technology  Association. OSTA  определяет UDF  как формат магнитооптических носителей, в основном DVD, это подмножество  формата ISO-13346 с расширениями, для замены ISO-9660), и драйвер raw FSD,  интегрированный в ntosKrnl.exe. Все эти ФС резервируют первый сектор тома как  загрузочный, анализируя его, драйвер ФС может идентифицировать свой формат и  найти необходимые метаданные. Распознав том, драйвер ФС создает объект  Устройство, представляющий смонтированную ФС. Диспетчер вв связывает этот  объект с объектом Устройство, созданным драйвером ввода-вывода через блок  параметров тома. В результате диспетчер вв перенаправляет&nbsp; через блок параметров запросы вв,  адресованные объекту Устройство вв, на объект Устройство ФС. Дополнительно  локальные драйверы ФС использует диспетчер кэша.&nbsp; Кроме того они поддерживают демонтирование  ФС, позволяющие ОС отсоединять драйвер ФС от объекта Устройство. Демонтирование  происходит, когда приложение напрямую обращается к содержимому тома или при  смене носителя. При первом обращении после демонтирования диспетчер вв повторно  инициирует операцию монтирования.</p>
  <p><strong>HPFS</strong> &ndash; High Perfomance File System &ndash; высокопроизводительная ФС. Впервые появилась в ОС OS/2. Разработана лучшими  специалистами IBM и  Microsoft как система для многозадачного режима и обеспечения высокой  производительности при работе с дисками больших объемов. Она стала первой  системой, в которой реализована поддержка длинных имен.&nbsp; Она обладает типичной структурой каталогов,  однак4о поддерживает их автоматическую сортировку и расширенные атрибуты  файлов, позволяющие хранить дополнительную информацию о файле, например  сопоставленное с файлом графическое изображение, описание файла, комментарий и  др. В итоге такая организация позволяет упростить обеспечение безопасности и создание  множественных имен. Используется несколько базовых идей: каталоги размещаются в  середине диска; для поиска используются бинарные сбалансированные деревья;  информация о местоположении файловых записей рассредоточено по всему диску а  записи файла располагаются по возможности в смежных секторах и поблизости от  данных о его местоположении. Это существенно сокращает время позиционирования  головок и время ожидания пока под головкой не окажется нужный сектор. Структура  раздела HPFS следующая:  загрузочный блок (boot  block секторы  0-15, содержит имя тома, серийный номер, блок параметров BIOS, программу начальной загрузки), дополнительный блок (super block,  сектор 16, содержит указатели на список битовых карт, список сбойных блоков,  полосу каталогов, файловый узел корневого каталога, дату последней проверки  раздела утилитой, размер полосы), резервный блок (17 сектор, содержит указатели  на карту аварийного замещения, список свободных запасных блоков каталогов для  операций на сильно заполненном диске, ряд системных флагов и дескрипторов,  обеспечивает высокую отказоустойчивость системы, позволяя восстанавливать  поврежденные данные и переносить их в другое место), полоса 1, битовая карта 1,  битовая карта 2, полоса 2, полоса 3, битовая карта 3, битовая карта 4, полоса 4  и т.д. Вначале идет несколько управляющих блоков, далее пространство разбито на  области из смежных секторов &ndash; полос, в которой расположены данные файлов и  вспомогательная служебная информация о свободных или занятых секторах  полосы.&nbsp; Полоса занимает 8 Мб диска и  имеет свою битовую карту занятости секторов. Такая структура позволяет разместить  в непрерывном пространстве файл размером до 16Мб. <br />
    Файлы и каталоги базируются на файловом узле. Каждый файл и  каталог имеют свой файловый узел, занимающий 1 сектор, расположенный поблизости  от файла, обычно сразу перед ним. Он содержит размер файла, первые 15 символов  имени файла, специальную служебную информацию, статистику по доступу к файлу,  расширенные атрибуты и список управления доступом либо его часть. Если  расширенные атрибуты занимают много место, они выносятся отдельно, а узел  содержит только указатель на них. Если файл непрерывен, он описывается в узле 2  32 разрядными числами &ndash; указатель на первый блок файла, и длину непрерывного  экстента (число последовательных блоков файла). Для фрагментированного файла  узел содержит несколько таких пар. Для того, чтобы файл по возможности  оставался непрерывным, в конце каждого из них система старается зарезервировать  пространство хотя бы в 4 Кб для роста. В узле помещается информация максимум о  8 экстентах. Если их больше, в узел помещается указатель на блок размещения,  содержащий до 40 указателей на экстенты или на другие блоки размещения. Полоса  каталогов находится в середине диска. Если она заполняется полностью, HPFS использует и другие полосы. Поскольку обращения к каталогам  наиболее часты, а размещение такой информации в середине диска в среднем снижает  время позиционирования в 2 раза, то производительность уже значительно  возрастает. <br />
    Структура каталога представляет сбалансированное бинарное  дерево, записи в котором расположены в алфавитном порядке. Если в FAT для  поиска файла требуется в среднем просмотреть N/2, в худшем - N записей, то  здесь соответственно Int[log2N] в худшем случае. Каждая запись  дерева содержит атрибуты файла, указатель на соответствующий файловый узел,  информацию о дате и времени создания файла, обновления и обращения, об объеме  расширенных атрибутов, счетчик обращений к файлу, длина имени и само имя,  другую информацию. При переименовании файла может потребоваться  перебалансировка дерева. В результате, если диск переполнен, может не хватить  дискового пространства для этой операции. Поэтому используется небольшой пул  свободных блоков, указатель на который хранится в резервном блоке. Для  исправления ошибок используется механизм аварийного замещения HotFix. Если при  записи обнаруживается сбойный сектор, информация записывается в один из  резервных секторов. Карта аварийного замещения представляет собой пару номеров  &ndash; первый это номер сбойного сектора, второй &ndash; номер сектора для его замещения.  При операциях чтения записи просматривается эта карта и при необходимости  выполняется замена адреса. Это не влияет существенно на производительность,  поскольку оно выполняется только при физической операции, а не при чтении  данных из кэша. При проверке диска утилитой, замещенные сектора переносятся в  новый обычный сектор диска, наиболее подходящий для файла, с учетом сохранения  его непрерывности. Соответственно данные в карте аварийного замещения  обнуляются, а номер сбойного сектора помещается в соответствующий список,  который хранится в дополнительном блоке HPFS.&nbsp;  Большинство объектов ФС, в т.ч. файловые узлы, блоки размещения и блоки  каталогов имеют уникальные 32 разрядные идентификаторы и указатели на свои  родительские и дочерние блоки. Анализ файловых узлов, блоков размещения и  каталогов во многих случаях позволяет восстановить структуру ФС после сбоя. <br />
    ФС поддерживает управление алгоритмами оптимизации запросов,  приоритетов, глубину просмотра очереди. Соответствующий файл инициализации в  OS/2 поддерживает ряд соответствующих параметров, позволяющих выбрать следующие  варианты оптимизации доступа: FIFO, элеваторный алгоритм, который используется  и по умолчанию, либо алгоритм, выбранный менеджером дисковых операций. При  поддержке приоритетов используются отдельные очереди запросов для каждого приоритета.  Если приоритеты не поддерживать, используется одна общая очередь. По умолчанию  приоритеты поддерживаются. Можно задать и тот вариант, который был выбран  менеджером дисковых операций. Глубина просмотра очереди для оптимизации  запросов задается величиной от 1 до 255. По умолчанию глубина определяется  автоматически на основании рекомендации драйвера дискового адаптера. <br />
    В целом по организации, HPFS  является самой высокопроизводительной ФС.</p>
  <p>При проектировании <strong>NTFS</strong> особое внимание было уделено следующим&nbsp;  характеристикам:</p>
  <ol>
    <li>надежность. Высокопроизводительные  системы и серверы должны обладать повышенной надежностью. Один из способов  повышения надежности &ndash; механизм транзакций, при котором выполняется  журналирование файловых операций.</li>
    <li>расширенная функциональность. NTFS  проектировалась с учетом возможности расширения. В ней повышена отказоустойчивость,  имеется эмуляция других ФС, мощная модель безопасности, параллельная обработка  потоков данных и создание файловых атрибутов, определяемых пользователем.</li>
    <li>поддержка POSIX. (Portable Operating system  for computing environments) Переносимая ОС для вычислительных сред. Разработан в 1988 и с 1990 является стандартом. Представляет  собой набор функций, взятых из ОС AT&amp;T UNIX System V и Berkeley Standart  Distribution UNIX. Основное внимание этого стандарта уделено интерфейсу  прикладных программ с ОС. Имеется механизм жестких ссылок, позволяющий  ссылаться на один и тот же файл по нескольким именам.</li>
    <li>гибкость. Размер кластера может  изменяться в пределах от 512 байт до 64 Кб. Поддержка длинных имен файлов и  имена 8.3 для совместимости с FAT.</li>
  </ol>
  <p>Максимально возможные размеры тома (и файла) составляют 16  экзабайт (264). В структуру каталогов заложена модель сбалансированного  бинарного дерева, имеются средства самовосстановления, поддерживается объектная  модель безопасности NT, при которой все тома, каталоги и файлы рассматриваются  как самостоятельные объекты. Безопасность обеспечивается на уровне файлов.  Система обладает встроенными средствами сжатия.</p>
  <p>Структура тома. NTFS делит все полезное дисковое  пространство тома на кластеры, наиболее часто используется кластер в 2 или 4  Кб, поддерживая размеры от 512 байт до 64К. Дисковое пространство делится на 2  неравные части. 12% диска отводятся под зону MFT master file table. Запись в  эту зону невозможна, она используется для роста метафайла MFT без фрагментации.</p>
  <table border="1" cellspacing="0" cellpadding="0">
    <tr>
      <td width="38" valign="top"><p>MFT</p></td>
      <td width="66" valign="top"><p>зона MFT</p></td>
      <td width="255" valign="top"><p>Зона для размещения файлов и каталогов</p></td>
      <td width="94" valign="top"><p>Копия первых 16 записей MFT</p></td>
      <td width="259" valign="top"><p>Зона для размещения файлов и каталогов</p></td>
    </tr>
  </table>
  <p>MFT представляет собой централизованный каталог всех  остальных файлов диска, в том числе и себя самого. MFT разделен на записи  размера в 1 Кб, каждая из которых соответствует какому-либо файлу. Размер  файловых записей MFT для тома определяется во время форматирования и может  находиться в пределах от 1 до 4 Кб. Первые 16 файлов носят служебный характер и  недоступны ОС, называются метафайлами, причем первый файл &ndash; сам MFT. Эти 16  элементов имеют строго фиксированное положение и имеют копию в середине диска.  Остальные части MFT могут находиться в произвольных местах диска. Метафайлы  находятся в корневом каталоге NTFS тома, их имена начинаются с $.<br />
    $MFT &ndash; сам MFT<br />
    $MFTMirr &ndash; копия 16 записей в середине тома<br />
    $LogFile &ndash; файл поддержки операций журналирования<br />
    $Volume &ndash; Служебная информация &ndash; метка тома, версия файловой  системы и т.д.<br />
    $AttrDef &ndash; список стандартных атрибутов файлов тома<br />
    $. &ndash; корневой каталог<br />
    $Bitmap &ndash; карта свободного места тома<br />
    $Boot &ndash; загрузочный сектор<br />
    $Quota &ndash; файл с правами пользователей на использование  дискового пространства (начиная с NTFS 5.0)<br />
    $Upcase &ndash; таблица соответствия заглавных и прописных букв в  именах файлов<br />
    В записях MFT хранится вся информация о файлах, кроме  собственно данных, имя файла, размер, положение на диске отдельных фрагментов и  т.д. Если одной записи MFT не хватает, используется несколько, не обязательно  идущих подряд. Если файл небольшого размера, то он хранится в самой MFT, в  свободном месте в пределах одной записи. Файл в томе идентифицируется файловой  ссылкой в виде 64разрядного числа. Это номер файла, соответствующий позиции его  записи в MFT и номера последовательности, который увеличивается , если эта  позиция в MFT используется повторно</p>
  <p>Файл представляется с помощью потоков. Потоками файла  являются не только данные, но и его атрибуты. Т.е. сущность файла &ndash; его номер в  MFT, а все остальное, в т.ч. потоки &ndash; опциональны. Соответственно файлу можно  назначить новый поток, записав в него любые данные. В Windows 2000 так пишется  информация об авторе и содержании файла. Эти дополнительные потоки не  просматриваются стандартными средствами, например, размер файла &ndash; это размер  только основного потока с данными. В результате можно удалить короткий файл, а  освободится несколько Мб. Максимальная длина 1 потока &ndash; 16 Эб. Стандартные  атрибуты файлов и каталогов тома NTFS имеют фиксированные имена и коды типа.</p>
  <p>Стандартная информация о файле. &ndash; Традиционные атрибуты Read  Only, Hidden, Archive, System, отметки времени создания и модификации, число  каталогов, ссылающих на файл<br />
    Список атрибутов. - Список атрибутов, из которых состоит  файл, файловая ссылка на файловую запись и MFT, в которой расположен каждый из  атрибутов, если файлу необходимо более одной записи MFT.<br />
    Имя файла. - Имя файла в символах Unicode. Может иметь  несколько атрибутов-имен. Например, если имеется связь POSIX с файлом или  имеется имя формата 8.3.<br />
    Дескриптор защиты.-&nbsp;  Структура данных, предохраняющая от несанкционированного доступа. Определяется  владелец файла и кто имеет доступ.<br />
    Данные. - Собственно данные файла. У файла по умолчанию  имеется один безымянный атрибут данных, он может иметь дополнительные  именованные атрибуты данных. У каталога нет атрибута данных по умолчанию, но  может иметь необязательные именованные атрибуты данных<br />
    Корень индекса, размещение индекса, битовая карта (только  для каталогов) &ndash; атрибуты для индексов имен файлов в больших каталогах.<br />
    Расширенные атрибуты HPFS &ndash; атрибуты, используемые для  реализации расширенных атрибутов HPFS для подсистемы OS/2 и OS/2 клиентов  файл-серверов Windows NT.</p>
  <p>Атрибуты файла в записях MFT расположены в порядке  возрастания числовых значений кодов типа, причем некоторые атрибуты, такие как  данные или имена, могут встречаться несколько раз.&nbsp; Обязательны атрибуты стандартной информации,  имени файла, дескриптора защиты и данных. Остальные атрибуты опциональны. Блоки  файла описываются аналогично HPFS &ndash; последовательностью  пар, определяющих экстенты. Если свободной области в записи недостаточно для  хранения всех экстентов, в запись помещаются номера записей MFT, содержащих информацию об экстентах. Имя файла может содержать  любые символы Unicode, в т.ч. и символы национальных алфавитов, длиной до 255  символов. Каталог представляет собой специальный файл, хранящий ссылки на  другие файлы и каталоги. Файл поделен на блоки, каждый блок содержит имя файла,  базовые атрибуты и ссылку на элемент MFT, который содержит полную информацию.  Внутренняя структура каталога представляет собой бинарное дерево. </p>
  <p>NTFS имеет следующие операции, которые могут быть разрешены  для работы с файлом: чтение, запись, выполнение, удаление, изменение  разрешений, получение владения файлом. Некоторые их сочетания используются ФС в  качестве стандартных:</p>
  <table border="1" cellspacing="0" cellpadding="0">
    <tr>
      <td width="237" rowspan="2" valign="top"><br />
        Стандартные разрешения NTFS </td>
      <td width="481" colspan="2" valign="top"><p>Соответствующие им комбинации индивидуальных разрешений</p></td>
    </tr>
    <tr>
      <td width="244" valign="top"><p>для каталогов</p></td>
      <td width="237" valign="top"><p>для файлов</p></td>
    </tr>
    <tr>
      <td width="237" valign="top"><p>Нет доступа &ndash; No access</p></td>
      <td width="244" valign="top"><p>Нет разрешений</p></td>
      <td width="237" valign="top"><p>нет разрешений</p></td>
    </tr>
    <tr>
      <td width="237" valign="top"><p>просмотр &ndash; list</p></td>
      <td width="244" valign="top"><p>Read, Execute</p></td>
      <td width="237" valign="top"><p>нет разрешений</p></td>
    </tr>
    <tr>
      <td width="237" valign="top"><p>чтение &ndash; read</p></td>
      <td width="244" valign="top"><p>Read, Execute</p></td>
      <td width="237" valign="top"><p>Read, Execute</p></td>
    </tr>
    <tr>
      <td width="237" valign="top"><p>добавление &ndash; add</p></td>
      <td width="244" valign="top"><p>Write, Execute</p></td>
      <td width="237" valign="top"><p>нет разрешений</p></td>
    </tr>
    <tr>
      <td width="237" valign="top"><p>чтение и добавление &ndash; Add &amp; read</p></td>
      <td width="244" valign="top"><p>Read, write, Execute</p></td>
      <td width="237" valign="top"><p>Read, Execute</p></td>
    </tr>
    <tr>
      <td width="237" valign="top"><p>изменение &ndash; change</p></td>
      <td width="244" valign="top"><p>Read, write, Execute, delete</p></td>
      <td width="237" valign="top"><p>Read, write, Execute, delete</p></td>
    </tr>
    <tr>
      <td width="237" valign="top"><p>полный доступ &ndash; full control</p></td>
      <td width="244" valign="top"><p>все</p></td>
      <td width="237" valign="top"><p>все</p></td>
    </tr>
  </table>
  <table border="1" cellspacing="0" cellpadding="0">
    <tr>
      <td width="95" valign="top"><p>Индивидуальные разрешения NTFS</p></td>
      <td width="316" valign="top"><p>Для каталога</p></td>
      <td width="308" valign="top"><p>Для файла</p></td>
    </tr>
    <tr>
      <td width="95" valign="top"><p>Чтение Read</p></td>
      <td width="316" valign="top"><p>Просмотр имен каталога, файлов в нем, разрешений на доступ    к нему, атрибутов каталога и сведений о владельце</p></td>
      <td width="308" valign="top"><p>Просмолтр содержимого файла, разрешений на доступ к нему,    его атрибутов и сведений о его владельце</p></td>
    </tr>
    <tr>
      <td width="95" valign="top"><p>Запись Write</p></td>
      <td width="316" valign="top"><p>Добавление в каталог файлов и папок, изменение атрибутов    каталога, просмотр атрибутов каталога, сведений о владельце и разрешений на    доступ к нему</p></td>
      <td width="308" valign="top"><p>Просмотр разрешений на доступ к файлу и сведений о    владельце, изменение атрибутов файла, изменение и добавление данных файла</p></td>
    </tr>
    <tr>
      <td width="95" valign="top"><p>Выполнение Execute</p></td>
      <td width="316" valign="top"><p>Просмотр атрибутов каталога, изменения во вложенных    папках, просмотр разрешений на доступ к каталогу и сведений о его владельце</p></td>
      <td width="308" valign="top"><p>Просмотр разрешений на доступ к файлу, его атрибутов и    сведений о его владельце, запуск файла</p></td>
    </tr>
    <tr>
      <td width="95" valign="top"><p>Удаление Delete </p></td>
      <td width="316" valign="top"><p>Удаление каталога</p></td>
      <td width="308" valign="top"><p>Удаление файла</p></td>
    </tr>
    <tr>
      <td width="95" valign="top"><p>Смена разрешений Change Permissions</p></td>
      <td width="316" valign="top"><p>Изменение разрешений на доступ к каталогу</p></td>
      <td width="308" valign="top"><p>Изменение разрешений на доступ к файлу</p></td>
    </tr>
    <tr>
      <td width="95" valign="top"><p>Смена владельца Take OwnerShip</p></td>
      <td width="316" valign="top"><p>Назначение себя владельцем каталога </p></td>
      <td width="308" valign="top"><p>Назначение себя владельцем файла</p></td>
    </tr>
  </table>
  <p>NTFS поддерживает прозрачное сжатие файлов. Если файл создается  в сжатом режиме, система автоматически сжимает данные при записи и  распаковывает их при чтении. Алгоритм сжатия применяется независимо для серий  из 16 последовательных блоков. Если при сжатии получается выигрыш хотя бы в 1  блок, записывается сжатый вариант, иначе полный. Сжатая область записывается в MFT в виде 2 экстентов, первый соответствует реальному  физическому объему сжатых данных, вторая пара имеет 0 в качестве первого числа,  и количество сжавшихся блоков файла в качестве второго. 0 служит идентификатором,  что предыдущий экстент сжат. NTFS  имеет дополнительно драйвер-фильтр  шифрования, позволяющий на лету зашифровывать файлы, в настоящий момент по  модифицированному алгоритму DES. NTFS не  может использоваться для форматирования гибких дисков</p>
  <p><strong>CD - ISO9660. </strong>Стандарт был принят в 1988. Стандартом  были наложены ряд ограничений на формат, чтобы считать данные могла даже самая  слабая из имеющихся на тот момент ОС. В отличие от жестких дисков, у CD нет концентрических цилиндров, имеется непрерывная спираль.  На ней последовательно размещены биты, которые делятся на логические блоки (логические  сектора) объемом 2352 байт. Часть из них используется для преамбул, коррекции  ошибок и т.д. Чисто информация в блоке содержит 2048 байт. Аудиодиски содержат  специальные разделительные участки между композициями и специальные заголовки и  концевики. Диски могут разделяться на отдельные логические тома. Диск  начинается с 16 блоков, назначение которых не определяется стандартом. Они  могут использоваться для размещения загрузчика ОС. За ними идет блок, содержащий <strong>основной описатель тома</strong>. Он содержит  помимо прочего идентификатор системы (32 байта), идентификатор тома (32 байта),  идентификатор издателя (128 байт), идентификатор составителя данных (128 байт).  Эти поля могут заполняться произвольным образом, однако используются только  символы верхнего регистра, цифры и некоторые знаки препинания для совместимости  с разными платформами. ООТ также содержит имена трех файлов, которые могут  содержать краткий обзор, уведомление об авторских правах и библиографическая  информация.&nbsp; Содержит размер логического  блока, количество блоков на диске, дата создания и дата окончания срока службы  диска. Содержит описатель корневого каталога, что позволяет найти его на диске.  От него можно определить оставшиеся файлы и каталоги. Кроме ООТ может  содержаться дополнительный описатель тома. Корневой каталог может содержать  произвольное число записей. Последняя запись имеет специальный маркер для  указания, что он последний. Записи могут иметь переменную длину. Они содержат  от 10 до 12 полей. Нетекстовые &ndash; двоичные &ndash; поля кодируются дважды &ndash; сначала в  модели типа Pentium (младшие байты по младшему адресу), затем в модели типа SPARC (старшие байты по младшему адресу). Первое поле каталога (1  байт ) &ndash;длина записи, если записи имеют расширенные атрибуты, то второй байт  содержит длину записи расширенных атрибутов. Далее 8 байт (32-битный адрес)  указывают номер начального блока файла. Файл хранится в виде непрерывной  последовательности блоков, поэтому следующее поле (8 байт) содержит его размер.  Следующее поле (7байт) содержит дату и время создания файла, годы отсчитываются  от 1900. Следующий байт содержит флаги. Среди них есть флаг скрытый, разрешение  расширенных атрибутов, последняя запись каталога. Далее два байта описывают  чередование частей файла на диске. В простейшей версии стандарта оно не используется.  Следующие 4 байта содержат номер диска в наборе, на котором расположен файл.  Соответственно на диске может иметься каталог файлов для набора дисков в  количестве 216. Следующий байт содержит длину имени файла в байтах.  Далее идет имя файла, точка, расширение, точка с запятой, один или два байта  версии файла. В имени могут использоваться прописные символы, цифры, символ  подчеркивания. Допускается длина до 8 символов, расширение до трех символов.  Еще два поля могут и не использоваться. Это поле заполнение, которое  используется для выравнивания размера записи до четного количества байт. Если  выравнивание требуется, то используется нулевой байт. И еще одно поле &ndash;  системное &ndash; никак не определено стандартом, в том числе и размер. Оно должно  состоять из четного числа байт. <br />
    Все записи каталога, кроме 2 первых, расположены в алфавитном  порядке. Первая запись &ndash; описатель самого каталога, вторая &ndash; ссылка на  родительский каталог. Максимальная глубина вложенности каталогов равна 8.  Стандарт предусматривает 3 уровня ограничений. 1 уровень &ndash; самый жесткий: это  формат имени 8.3, имена каталогов 8.0, файлы должны быть непрерывными. 2  уровень. Имена могут иметь длину до 31 символа из того же набора. 3  уровень.&nbsp; Файл может состоять из  нескольких разделов, каждый представляет собой непрерывную последовательность  блоков. Одна и та же&nbsp; последовательность  может несколько раз встречаться в одном и том же файле и даже принадлежать  разным файлам.<br />
    Чтобы ФС UNIX  могла быть представлена на CD_ROM, были  разработаны расширения. Это <strong>Рок-Ридж</strong> расширения. Они используют системное поле каталога для совместимости. Если  система не поддерживает расширения, системное поле будет игнорировано.  Расширения содержат следующие поля: PX &ndash;  атрибуты POSIX, фактически стандартные биты разрешений&nbsp; владельца, группы, и т.д. PN &ndash; старший и младший номер устройства, ассоциированного с  файлом, что позволяет сохранять каталог /dev.  SL &ndash; символьная связь, позволяет файлу из одной ФС ссылаться  на файл из другой ФС. NM &ndash; альтернативное  имя, которое можно указывать без каких либо ограничений. CL,PL &ndash; расположение  дочернего узла. RE &ndash; перераспределение.  Эти три поля используются, чтобы обойти ограничение на глубину вложенности  каталогов. С их помощью можно указать куда в иерархии должен быть помещен тот  или иной каталог. TF &ndash; Временные  штампы. Содержит времена создания, последнего изменения, последнего доступа к файлу.  Такая структура расширений позволяет полностью скопировать ФС UNIX на  CD_ROM, а после  полностью восстановить ее.<br />
    Другую группу расширений разработала Microsoft. Это расширения <strong>Joliet</strong>. Они должны были позволить также полностью копировать на  диск ФС Windows, а потом ее восстанавливать. Возможности этих расширений:  длинные имена файлов до 64 знаков, набор символов UNICODE (т.е. имя из 64 знаков может занимать 128 байт), большая  глубина вложенности каталогов, имена каталогов с расширениями.</p>
  <p><strong>UNIX</strong>.  Изначально UNIX могла  использовать только один тип ФС. Позже Sun Microsystems  разработала интерфейс vnode/vfs,  позволяющий сочетать различные из них. Поскольку в UNIX понятие файл включает в себя различные  абстракции, в т.ч. сетевые соединения через сокеты, каналы и очереди FIFO, блочные и символьные устройства, то и в архитектуре vnode/vfs файлы и  ФС являются базовыми элементами, представляющими модульный интерфейс  взаимодействия с остальной частью ядра. Помимо ФС в общепринятом значении,  такой подход позволил разработать ФС специализированные ФС, например, для  работы с адресным пространством любого процесса.</p>
  <p><strong>S5FS</strong>. System V File System. Эта  оригинальная ФС, поддерживаемая UNIX  изначально. Раздел представляется в  виде набора блоков. Размер каждого блока от 512 б и более, по степени 2.  Драйвер преобразует номер блока в номера цилиндра, дорожки и секторов на диске.  В начале раздела содержится загрузочная область с кодом начальной загрузки. За  ней расположен суперблок, содержащий атрибуты и метаданные ФС. Далее идет список  индексных узлов файлов. Размер i-узла 64  байта. В начальном блоке может быть размещено несколько i-узлов. Начальный адрес суперблока и списка i-узлов постоянен для любого раздела. Список i-узлов имеет постоянный размер, ограничивая максимальное  число файлов в разделе, это задается при создании ФС на разделе. За таблицей i-узлов идет область данных. Она содержит непосредственно  файлы данных и каталоги, а также блоки косвенной адресации, содержащие  указатели на блоки данных файлов.<br />
    <strong>Суперблок </strong>содержит размер ФС в блоках, размер  списка i-узлов в блоках, количество свободных блоков и i-узлов., список свободных блоков, список свободных i-узлов. При этом не содержится полный список свободных  узлов, а только какая-то их часть. Когда известные узлы заполнятся, ядро  сканирует диск для поиска других свободных узлов и добавляет их в список. Для  блоков это невозможно. Полный список свободных блоков занимает несколько блоков  диска. Суперблок содержит только первую часть этого списка. Первый элемент  списка в блоке указывает на следующий блок, содержащий список.<br />
    Каждый файл имеет свой i-узел,  содержащий служебную информацию или метаданные файла. При открытии файла информация  из i-узла считывается в память в специальную структуру, которая  имеет ряд дополнительных полей. Поля i-узла диска:<br />
  <img src="../images/1sem_theory_p14_clip_image003.gif" alt="2" width="349" height="332" hspace="12" align="right" />di_mode 2 байта тип файла, привилегии и т.д.<br />
    di_nlinks 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; количество жестких ссылок на файл<br />
    di_uid 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; идентификатор владельца<br />
    di_gid 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; идентификатор группы владельца<br />
    di_size 4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; размер файла в байтах<br />
    di_addr 39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; массив адресов блоков файла<br />
    di_gen 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; генерируемый  номер (инкрементируется при запросе индексного дескриптора для нового файла)<br />
    di_atime 4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; время последнего доступа<br />
    di_mtime 4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; время последней модификации<br />
    di_ctime 4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; время последнего изменения  индексного дескриптора<br />
    4 старших бита типа файла позволяют указать обычный ли это  файл, каталог, блочное либо символьное устройство и т.д. Младшие 9 бит  определяют права доступа для владельца, группы и т.д. Поле addr позволяет  хранить 13 элементов массива блоков файла: номер блока диска занимает 3 байта.  Первые 10 элементов содержат номера блоков с данными. Если этого недостаточно,  то 11 элемент содержит номер блока, содержащего не данные, а остальные номера  блоков файла, т.н. блок косвенной адресации. Если и этого недостаточно, то 12  элемент содержит номер блока двойной косвенной адресации, который содержит  номер блока, содержащего адреса блоков, содержащих номера остальных блоков  файла, а если и этого мало, то 13 элемент содержит номер блока тройной  косвенной адресации. Если какой-либо блок файла не содержит данных, например, в  результате перемещения указателя для записи сразу за него, то такой блок на  диске не хранится, соответствующий адрес блока в массиве устанавливается в 0. <br />
    Каталог содержит список файлов и подкаталогов. Размер записи  &ndash; 16 байт. Первые 2 содержат номер i-узла,  соответствующего файлу, еще 14 &ndash; имя файла. В результате на диске не может быть  более 216=65535 файлов &ndash; по количеству возможных номеров i-узлов. Если имя файла меньше 14 символов, оно завершается  0. Каталог, поскольку тоже является файлом, имеет и собственный i-узел. Первые два элемента каталога &ndash; это сам каталог и  родительский каталог. <br />
    Недостатком является отсутствие копии суперблока, что  снижает надежность, далее все i-узлы  находятся в начале диска, а данные &ndash; в оставшейся части, что вызывает  дополнительное перемещение головок при чтении файла. Кроме этого ограничение на  общее число файлов и длину имени. </p>
  <p>В результате была разработана <strong>FFS</strong> Fast File  System в  лаборатории Berkeley. В целом она предоставляет те же возможности, однако  оптимизирована по быстродействию и снят ряд ограничений. Каждый раздел делится  на одну или несколько групп цилиндров. Информация суперблока делится на 2  части. Первая содержит сведения о ФС в целом, эта информация может измениться  только при форматировании. Каждая группа цилиндров содержит структуру с  информацией о группе, в т.ч. списки свободных i-узлов  и блоков.&nbsp; Кроме этого, каждая группа  цилиндров хранит дубликат&nbsp; суперблока.  Причем эти копии в каждой группе находятся на разном смещении. В результате  суперблок распределен по разделу. Размер блока установлен в 4К, либо 8К в  отличие от 512байт и 1К s5fs. Это позволило отказаться от блоков тройной косвенной  адресации. Для маленьких файлов такой размер блока вызывает существенные потери  дискового пространства. Поэтому для блоков, не попавших в косвенную адресацию,  блок делится на 1,2,4 или 8 фрагментов, объемом минимум 512 байт. Файл должен  занимать целые дисковые блоки, за исключением последнего. Он может содержать  только один или несколько последовательных фрагментов. В результате один блок  может содержать несколько конечных фрагментов разных файлов, что снижает  потери. Помимо этого система оптимизирует размещение файлов и каталогов по  группам цилиндров. Например, блоки данных система пытается разместить в той же  группе цилиндров, что и его i-узел.  Длина записи каталога может быть различна. Постоянная часть содержит номер i-узла, размер переменной части, тип файла, размер имени  файла, далее идет имя файла, заканчивающееся 0,&nbsp;  длина имени ограничена 255 символами. Каталог делится на 512-байтовые  области, 1 элемент не может занимать несколько таких областей. Система стала  поддерживать символические ссылки. Поддержка FFS была включена в SVR4. <br />
    <img src="../images/1sem_theory_p14_clip_image005.gif" alt="3" width="373" height="114" hspace="12" align="right" /> <br />
    Linux <strong>Ext</strong><strong>2</strong><strong>fs</strong>. В целом  похожа на FFS. Поскольку для современных дисков, скрывающих физическую  геометрию, и предоставляющих виртуальный интерфейс, разделение на группы  цилиндров ни к чему не приводит, то после загрузочного блока, система делит  раздел на группы блоков. Каждая группа начинается с суперблока, в котором содержится  информация сколько блоков и i-узлов  находится в данной группе, размере группы и т.д. Далее идет описатель группы,  хранящий информацию о расположении битовых массивов, количестве свободных  блоков и i-узлов в группе а также каталогов в группе. В битовых  массивах ведется учет свободных блоков и i-узлов.  Размер каждого из массивов &ndash; 1 блок. За битовыми массивами располагаются сами i-узлы, размером по 128 байт каждый Это позволило хранить 12  прямых и 3 косвенных дисковых адреса длиной по 4 байта, а не по 3.&nbsp; Имеются поля, зарезервированные для  указателей на списки управления доступом, но это на будущее. Дисковые блоки  используются фиксированного размера в 1 Кб.&nbsp;  Система также пытается оптимизировать расположение блоков файла на диске.  Так, новый блок файла по возможности помещается в ту же группу, что и остальные  блоки, желательно сразу за ними. Новый файл &ndash; в той же группе блоков, что и  блоки каталога. Новые каталоги равномерно распределяются по диску. <br />
    Кроме того, Linux  использует ФС <strong>proc</strong>. Для каждого процесса в каталоге /proc  создается подкаталог с именем, равным PID  процесса в десятичном виде. В  подкаталоге содержатся файлы, хранящие информацию о процессе &ndash;командную строку,  строки окружения, маски сигналов и т.д. Реально таких файлов на диске нет.  Многие расширения, реализованные в Linux, расположены  в /proc. Это позволяет пользовательскому процессу читать системную  информацию безопасным для системы образом.</p>
  <p><strong>ФС c  журнальной структурой</strong>. LFS. Log-structured File System Идея  в том, что по мере увеличения скорости процессоров и объема ОЗУ кэширование  становится все выгоднее. Становится возможным удовлетворить существенную часть  всех дисковых запросов непосредственно из кэша ФС без обращения к диску.  Следовательно, большинство обращений к диску будут обращениямина запись, а не  на чтение. Поэтому алгоритм опережающего чтения становится малоэффективным.  Далее, в большинстве ФС запись выполняется небольшими блоками данных, что также  неэффективно, поскольку помимо собственно записи выполняется еще и относительно  длинный поиск цилиндра. Например, в UNIX для записи в файл требуется: выполнить  операции записи в i-узел каталога, блок каталога, i-узел файла и блок самого  файла. Система LFS пытается учесть эти особенности. Идея в том, что диск  используется как журнал. Периодически, когда возникает необходимость, все  буферизированные в памяти блоки, которые должны быть записаны, собираются в  единый сегмент, и он записывается на диск единым блоком в конец журнала. Этот  сегмент может содержать i-узлы, блоки каталогов, блоки данных, перемешанные  друг с другом. В начале каждого сегмента создается оглавление сегмента. Если  средний размер сегмента довести до 1 Мб, пропускная способность диска может бть  использована практически на 100%. Для быстрого поиска i-узлов, поскольку теперь  они могут располагаться в произвольной области, создается массив, j элемент  которого хранит указатель на j i-узел. Этот массив хранится на диске и вкэше.  Поскольку постепенно весь объем диска будет использован журналом, то в такой ФС  определен чистящий поток, постоянно сканирующий журнал, чтобы делать его более  компактным. Поток считывает содержимое сегмента журнала, определяя какие i-узлы  и файлы в нем находятся. Далее проверяется текущий массив i-узлов, чтобы  определить, являются ли i-узлы текущими и используются ли все еще блоки файлов.  Если нет, то такая информация отбрасывается, а все еще используемые узлы и  блоки считываются в память, чтобы быть записанными в следующий сегмент.  Исходный сегмент отмечается как свободный, и может быть использован для новых  данных.Чистильщик двигается по журналу от сегмента к сегменту, а диск  фактически представляет большой кольцевой буфер, в котором пишущий поток  добавляет сегменты с одного конца, а чистильщик удаляет их с другого.</p>

</BODY>
</HTML>