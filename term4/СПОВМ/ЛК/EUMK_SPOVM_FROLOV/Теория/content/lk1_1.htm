<!-- (C) 2011-2012 V.Prytkov, V. Suponev, A.Uvarov. BSUIR -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<META HTTP-EQUIV="Content-Language" CONTENT="ru">
<link rel="stylesheet" type="text/css" href="../css/style.css" />

<title>Лекция №1. Введение.</title>
<base target="_top">
</HEAD><BODY>
  <p align="center"><strong>Введение</strong></p>
  <p align="left"><em>Предмет курса, его цели и задачи. Методическое обеспечение.  История развития системного ПО. Классификация системного ПО. ОС, системы  управления файлами, интерфейсы, системы программирования, утилиты. Понятие  ресурса в ОС. Концепция виртуализации ресурса</em></p>
  <p><strong>Литература</strong></p>
  <ol>
    <li>Рэнд Моримото и др.,  Microsoft Windows Server 2012. Полное руководство. / Рэнд Моримото, Майкл Ноэл, Гай Ярдени, Омар Драуби, Эндрю Аббейт, Крис Амарис. – СПб: Вильмс, 2013.</li>
    <li>Таненбаум, Э. Современные операционные системы / Э. Таненбаум. – СПб. : Питер, 2011.</li>
    <li>Пол Мак-Федрис. Microsoft Windows 7. Полное руководство. / Пол Мак-Федрис. – СПб.: Вильямс, 2012.</li>
    <li>Руссинович, М. Внутреннее устройство Windows. / М. Руссинович, Д. Соломон. – М. : Издательство «Питер» ; СПб. : Питер, 2013.</li>
<li>Кофлер М. Linux. Полное руководство. / М. Кофлер. – СПб. : Питер, 2011.</li>
<li>Дейтел, Х. М. Операционные системы. В 2 ч. / Х. М. Дейтел, П. Дж. Дейтел, Д. Р. Чофнес. – Ч.1. Основы и принципы. Ч.2. Распределенные системы, сети, безопасность. – М. : Бином, 2013.</li>
<li>Лав Р. Linux. Системное программирование. 2-е изд. / Лав Р. – СПб. : Питер, 2014./li>
<li>Собель М.  Linux. Администрирование и системное программирование. 2-е изд. – М. Собель – СПб. : Питер, 2011.</li>
<li>Visual Studio 2010 для профессионалов / Н. Рандольф[и др.]. – М. Диалектика, 2011.</li>
  </ol>

  <h4><img src="../images/1sem_theory_p1_clip_image002.gif" alt="1" width="491" height="307" hspace="12" align="right" />Общая структура  программного обеспечения вычислительной системы</h4>
  <p>К системному ПО относят ПО самого низкого уровня.  Таким ПО являются: ОС, системы управления файлами, интерфейсные оболочки для  взаимодействия пользователя с ОС, системы программирования, утилиты. В рамках  курса изучаются теоретические и практические основы построения,  функционирования и проектирования системного ПО. </p>
  <p><strong>ОС</strong> &ndash; это  упорядоченная последовательность системных управляющих программ, совместно с  необходимыми информационными массивами, предназначенных для планирования и  исполнения пользовательских программ, управления всеми ресурсами вычислительной  машины (программами, данными, аппаратурой и другими распределяемыми и  управляемыми объектами) с целью предоставления возможности пользователям  эффективно, в некотором смысле, решать задачи, сформулированные в терминах  вычислительной машины. ОС состоит из особых программ и микропрограмм, которые  обеспечивают возможность использования аппаратуры. Любой из компонентов прикладного ПО  обязательно работает под управлением ОС. Основные функции ОС:</p>
  <ul>
    <li>прием от пользователя заданий и команд в виде директив соответствующего  языка или указаний с помощью устройств ввода и их обработка;</li>
    <li>прием и исполнение запросов на запуск, приостановку, остановку  программ;</li>
    <li>загрузка в ОЗУ исполняемых программ;</li>
    <li>передача управления программе (инициализация);</li>
    <li>идентификация всех программ и данных;</li>
    <li>обеспечение работы систем управления файлами и иных систем управления  низкого уровня, например СУБД;</li>
    <li>обеспечение мультипрограммного режима;</li>
    <li>обеспечение функций по организации и управлению всеми операциями  ввода-вывода;</li>
    <li>функционирование в режиме реального времени;</li>
    <li>распределение памяти и организация виртуальной памяти;</li>
    <li>планирование и диспетчеризация задач в соответствии со стратегией и  дисциплинами обслуживания;</li>
    <li>организация механизмов обмена сообщениями и данными между программами;</li>
    <li>защита данных программы от воздействия других программ;</li>
    <li>наличие сервисных возможностей для восстановления в случае сбоя;</li>
    <li>обеспечение работ систем программирования.</li>
  </ul>
  <p>Следует различать понятие ОС и <strong>операционной среды</strong>. ОС выполняет функции управления вычислительными  процессами в вычислительной системе, распределяет ресурсы системы между  процессами. Программная среда, в которой выполняется прикладное ПО &ndash;  операционная среда. Т.о. операционная среда &ndash; это набор сервисов и правил  обращений к ним, интерфейсы, необходимые для взаимодействия с ОС. ОС в общем  случае может поддерживать несколько операционных сред. </p>
  <p><strong>Система  управления файлами</strong> предназначена для организации удобного доступа к данным,  структурированным определенным образом. Именно СУФ позволяет заменить низкоуровневый  доступ с физической адресацией данных на высокоуровневый с логической  адресацией. Современные ОС имеют соответствующие СУФ. Некоторые ОС позволяют  работать с несколькими СУФ. Простейшие ОС могут и вовсе не иметь файловой  системы. </p>
  <p>Назначение <strong>интерфейсных  оболочек</strong> &ndash; расширение возможностей по взаимодействию с ОС. Примером  являются различные варианты графического интерфейса X Windows ОС UNIX, Explorer  в ОС Windows. К ПО этого класса относятся и возможности по организации иной  операционной среды в рамках виртуальной машины средствами данной ОС. Так, Linux  имеет возможности для запуска некоторых приложений ОС Windows. В этот класс  входят и эмуляторы ОС, когда одна ОС может быть запущена в рамках другой ОС.</p>
  <p><strong>Система  программирования</strong> предназначена для разработки ПО для конкретной ОС и имеет в качестве  составляющих элементов транслятор, редактор, компоновщик, отладчик и  библиотеки. Иногда система программирования позволяет получить ПО и для иной  ОС. В случае, когда ПО должно функционировать не в иной ОС, а на иной  аппаратной базе, используют термин кросс-систем.</p>
  <p><strong>Утилиты</strong> &ndash; это специальное системное  ПО, позволяющее выполнять ряд сервисных функций как по обслуживанию самой ОС,  так и по подготовке носителей, оптимизации размещения данных и т.д.</p>
  <p><strong>История развития  ОС</strong> и  системного ПО тесно связана с историей развития вычислительной техники в целом.  Первый цифровой компьютер был изобретен Чарльзом Беббиджем в конце XIX века.  Это была чисто механическая машина. В то же время он ясно сознавал, что для  аналитической машины требуется программное обеспечение, для чего нанял Аду  Лавлейс (Ada Lovelace), дочь знаменитого Байрона. Она стала первым в мире  программистом, а язык Ада назван в ее честь. Традиционно историю развития ВТ  разделяют на 4 периода.</p>
  <p>1. 1945-1955. Первые вычислительные машины на  электронных лампах использовали механические реле, длительность такта  составляла несколько секунд. Все ПО разрабатывалось непосредственно в машинных  кодах. Не существовало ни языков программирования, ни операционных систем. Фактически,  на компьютерах занимались прямыми числовыми вычислениями: таблицы  тригонометрических функций, логарифмов и т.д. Одна и та же группа людей  занимается и проектированием, и и эксплуатацией, и программированием  вычислительной машины. Нет специализации.</p>
  <p>2.  1955-нач. 60. В конце 50-х &ndash; начале 60-х появились компьютеры на транзисторах.  Программы набивались уже на перфокартах, для ввода данных в компьютер  использовалась промежуточная запись на магнитофонную ленту. Программы обрабатывались  в пакетном режиме. Появились языки программирования (Ассемблер, Фортран). ОС в  этот период разрабатывались для ускорения  и модификации кода перехода с задачи на задачу. Компьютеры  использовались главным образом для научных и технических вычислений. Считается, что первую ОС для IBM 701 в  начале 50-х создали в лаборатории GM. Следующая ОС была разработана в 1955 для  IBM 704. В первых ОС появилась концепция имён системных файлов как средств  достижения независимости программ от аппаратуры. Типичными  операционными системами были FSM (Fortran Monitor System) и IBSYS (создана  IBM). К концу 50-х годов ОС обладали  следующими характеристиками:<br />
    1.  Пакетная обработка одного пакета задач.<br />
    2.  Наличие стандартных подпрограмм ввода-вывода.<br />
    3.  Возможность перехода от программы к программе.<br />
    4. Наличие  средств восстановления после ошибок, обеспечивающих автоматическую чистку  машины в случае аварийного завершения задачи, позволяющих запускать следующую  задачу при минимальном вмешательстве оператора.<br />
    5.  Наличие языков управления заданиями, позволяющих описывать задания и ресурсы  для их выполнения.<br />
    Происходит разделение обслуживающего персонала на программистов,  операторов и т.д. </p>
  <p>3. Нач. 60-1980. В 60-х годах создаются  первые системы коллективного пользования с мультипрограммным обеспечением и  первая концепция мультисистемных машин. На этом этапе развиваются методы  программирования, обеспечивающие независимость от внешних устройств. Появляются  системы с разделением времени и системы реального времени. Наиболее существенные  отличия аппаратной базы этого периода, позволившие создать мультипрограммные  системы:<br />
    1. Реализация защитных механизмов, т.е.  наличие привилегированных (используемых только ОС) и непривилегированных команд  а также защиты памяти;<br />
    2. Наличие прерываний.<br />
    3. Развитие параллелизма в архитектуре,  т.е. прямой доступ к памяти и каналы ввода-вывода.<br />
    ОС этого периода отвечают за :<br />
    - организацию интерфейса между  прикладной программой и ОС при помощи системных вызовов:<br />
    - Организацию очереди заданий и  планирование использования процессора:<br />
    - сохранение контекста при  переключении заданий<br />
    - реализация стратегии  управления памятью<br />
    - поддержка межпрограммных  средств коммуникации<br />
    - средства синхронизации  программ.<br />
    В  конце 60х начале 70х годов у производителей существовали две совершенно  независимые линейки компьютеров: большие компьютеры с пословной обработкой  текста для научных и технических вычислений, и коммерческие компьютеры с посимвольной  обработкой для банков и страховых компаний для сортировки и печати данных. Ниша  между этими линиями была весьма существенной. IBM заполняет ее, выпустив серию  машин на ИС IBM/360. Модели в серии различались только ценой и  производительностью, являясь совместимыми по структуре и набору команд, и  использовали ОС OS/360. Идею совместимости быстро приняли и другие производители.  OS/360 на 2-3 порядка превышала по объемам FSM, была написана на ассемблере,  имела большое количество ошибок. Важным достижением этой системы явилась  многозадачность. Стала обеспечиваться подкачка, т.е. дозагрузка новых задач по  мере выполнения предыдущих. Был разработан режим разделения времени, когда у  каждого пользователя имелся свой терминал, а машина обслуживала запросы  поочередно. Первая серьезная подобного рода система была разработана в  Массачусетском технологическом институте &ndash; CTSS (Compatible Tme Sharing System  &ndash; совместимая система разделения времени).  Большое внимание стало уделяться разработке систем программирования.  Существовала проблема совместимости отдельных машин, для решения которой стали  разрабатываться эмуляторы и имитаторы.</p>
  <p>К этому времени относится и разработка  &ldquo;компьютерного предприятия общественного пользования&rdquo; &ndash; машины, поддерживающей  одновременно сотни пользователей в режиме разделения времени. Система была  названа MULTICS (MULTiplex Information and Computing Service&nbsp; - мультиплексная информационная и  вычислительная служба). Система была написана на языке PL/1, компилятор же  этого языка появился только через несколько лет. Проект с трудом был завершен,  но в итоге система была установлена примерно в 80 крупных компаниях и  университетах мира. Некоторые их них прекратили использовать ее только через 30  лет, в конце 90х годов.</p>
  <p>В этот же период с появлением PDP-1 растет рынок  мини-компьютеров. Память PDP-1 составляла всего 4К 18-битовых слов при цене 120  тыс. $ за штуку, однако это составляло порядка 5% от цены IBM7094, хотя на  некоторых задачах их производительность была практически равной. Кульминацией  их стало появление PDP-11. Впоследствии Кен Томпсон, работавший над проектом  MULTICS, нашел PDP-7 и написал усеченную однопользовательскую версию MULTICS. К  нему присоединился Деннис Ритчи, система получила название UNIX и была  перенесена на PDP-11/20 и ряд других, более совершенных машин. Чтобы не  переписывать исходный код каждый раз заново, Томпсон решил переписать его на  языке высокого уровня, разработал его, назвал язык В. Попытка оказалась  неудачной. Тогда Ритчи разработал следующий язык, назвав его С, и написал к  нему хороший компилятор. Вскоре UNIX была переписана на С, разработчики  опубликовали статью, получив за нее престижную премию Тьюринга, что принесло  UNIX известность. Благодаря широкому распространению в университетских кругах  PDP-11 и слабой ОС на них, UNIX быстро приобрела популярность. Для переноса на  другие платформы Стивом Джонсоном был написан переносимый компилятор С,  позволяющий настраивать его на создание объектного кода для практически любой  машины. Вскоре появилась первая переносимая версия UNIX. В конце концов  появилось два ведущих клона UNIX &ndash; System V и BSD. Для того, чтобы ПО могло  функционировать в любой версии UNIX, IEEE разработал стандарт POSIX, определяющий  минимальный интерфейс системного вызова.</p>
  <p>4. 1980 и далее. Появление БИС дало новый толчок к  развитию. В 1974 году Intel выпускает Intel 8080. Для его тестирования была  необходима ОС. Гари Килдэлл сконструировал контроллер гибкого диска, подключив  его к процессору. Так появился первый микрокомпьютер с диском. Для него была  написана система CP/M (Control Programm for Microcomputers). В течении 5 лет  CP/M занимала на рынке доминирующее положение. В начале 80х IBM разработала  первый персональный компьютер и стала искать для него ОС. Контактируя с Биллом  Гейтсом для получения лицензии на его интерпретатор языка BASIC, они  поинтересовались и по поводу ОС. Он рекомендовал Килдэлла. Однако тот отказался  от личной встречи, более того, его адвокат отказался подписывать соглашение о  неразглашении по поводу еще не выпущенного персонального компьютера.&nbsp; В итоге IBM вновь обратилась к Гейтсу. Он  нашел у местного производителя компьютеров подходящую ОС&nbsp; (DOS) и выкупил ее. После ряда доработок  совместно с Тимом Патерсоном, разработчиком системы, она была переименована в  MS-DOS (Microsoft Disc Operation System), и заняла доминирующее положение на  рынке ОС для ПК. Важную роль сыграла ориентация Гейтса на продажу системы не  конечным пользователям, а, в отличие от Килдэлла, производителям ПК для  оснащения ею их машин.</p>
  <p>Еще в 60е годы Даг Энгельбарт изобрел графический  интерфейс пользователя (GUI). Стив Джобс однажды увидел его в Xerox PERC, и  приступил к созданию Apple с графическим интерфейсом. Со второй попытки затея  удалась, и ПК приобрел дружественный пользователю интерфейс. Microsoft переняла  идею и на основе GUI создала надстройку над MS-DOS (Windows 3.11). В 1995 году  вышла первая независимая ОС Windows 95 от Microsoft. На настоящий момент UNIX  токже обзавелась графическим интерфейсом X Windows. С середины 80х годов с  ростом сетей ПК, стали развиваться сетевые и распределенные ОС. Сетевые ОС мало  отличаются от однопроцессорных систем, нуждаясь, по большому счету в сетевом интерфейсе,  что не изменяет структуру ОС. Распределенная ОС только представляется  пользователю традиционной системой, она на деле состоит из множества  процессоров, при распределение задач осуществляется средствами самой ОС,  освобождая от этого пользователя. Задержки при передаче данных в сетях  означают, что распределенная ОС должна уметь работать с неполной, устаревшей  или даже неверной информацией, что в корне отличается от однопроцессорных ОС,  где система имеет полную информацию относительно состояния системы.</p>
  <p><strong>Ресурс</strong>, в общем случае - всякий потребляемый  объект (независимо от формы его существования), обладающий некоторой  практической ценностью для потребителя. <strong>Классификация  ресурсов</strong> может быть произведена по широкому ряду свойств. </p>
  <p>По реальности  существования: физический и виртуальный. Под <strong>физическим</strong> понимают ресурс, который реально существует и при  распределении его между пользователями обладает всеми присущими ему физическими  характеристиками. <strong>Виртуальный ресурс</strong> - это некоторая модель физического ресурса. Виртуальный ресурс не существует в  том виде, в котором он проявляет себя пользователю. Как модель виртуальный  ресурс реализуется в некоторой программно-аппаратной форме. В этом смысле  виртуальный ресурс существует. Однако виртуальный ресурс может предоставить  пользователю при работе с ним не только часть тех свойств, которые присущи  объекту моделирования, т.е. физическому ресурсу, но и свойства, которые ему не  присущи. </p>
  <p>По  возможности расширения свойств: эластичный и жесткий. Характеризует ресурс с  точки зрения возможности построения на его основе некоторого виртуального  ресурса. Физический ресурс, который допускает &quot;виртуализацию&quot;, т.е.  воспроизведение и (или) расширение своих свойств, называют <strong>эластичным</strong>. <strong>Жестким</strong> называется физический ресурс, который по своим внутренним свойствам не  допускает виртуализацию. </p>
  <p>По  степени активности: активный и пассивный. При использовании <strong>активного ресурса</strong> он способен выполнять  действия по отношению к другим ресурсам (или даже в отношении самого себя) или  процессам, которые в общем случае приводят к изменению последних. <strong>Пассивный ресурс</strong> не обладает таким  свойством. Над таким объектом проводить допустимые для него действия, которые  могут привести к изменению его состояния, т.е. к изменению внутренних или внешних  характеристик. ЦП - активный ресурс, область памяти, выделяемая по требованию -  пассивный ресурс. </p>
  <p>По  времени существования: постоянный, временный. Если ресурс существует в системе  до момента порождения процесса и доступен для использования на всем протяжении  интервала существования процесса, то такой ресурс является <strong>постоянным</strong> для данного процесса. <strong>Временный</strong> ресурс может появляться или уничтожаться в системе  динамически в течение времени существования рассматриваемого процесса. Причем  создание и уничтожение может проводиться как самим процессом, так и другими  процессами - системными или пользовательскими. Очевидно, что ресурсы  разделяются по определенным правилам системной взаимосвязанных процессов.  Поэтому ресурсы, которые являются постоянными для одних процессов, могут быть  временными для других, и наоборот.&nbsp; </p>
  <p>По  степени важности: главный и второстепенный. Ресурс является <strong>главным</strong> по отношению к конкретному  процессу, если без его выделения процесс принципиально не может развиваться. К  таким ресурсам относятся прежде всего ЦП и ОП. Ресурсы, которые допускают  некоторую альтернативу развития процесса, если они не будут выделены,  называются <strong>второстепенными</strong>.  (Например МЛ, МД). </p>
  <p>По  функциональной избыточности: дорогие и дешевые. Разделение ресурсов на <strong>дорогие и дешевые</strong> связано с реализацией  принципа функциональной избыточности при распределении ресурсов. Перед  пользователем стоит задача выбора &ndash; получить быстро требуемый ресурс и дорого  заплатить за такую услугу, либо подождать выделения требуемого ресурса и после  его использования заплатить более дешево. При наличии в системе альтернативных  ресурсов вводятся и различные цены за их использование. </p>
  <p>По  структуре: простой и составной. Структурный признак устанавливает наличие или  отсутствие у ресурса некой структуры. Ресурс является <strong>простым</strong>, если не содержит составных элементов и рассматривается при  распределении как единое целое. <strong>Составной  ресурс</strong> характеризуется некоторой структурой. Он содержит в своем составе  ряд однотипных элементов, обладающих с точки зрения пользователей, одинаковыми  характеристиками. Процессам-пользователям безразлично, какой или какие из  элементов среди прочих из составного ресурса будут выделяться им при  удовлетворении их запросов на ресурс. Простой и составной ресурсы отличаются  числом состояний. Простой ресурс может быть либо &quot;занят&quot;, когда он  выделен для пользования какому-либо процессу, либо &quot;свободен&quot;.  Составной ресурс находится в состоянии &quot;свободен&quot;, если ни один из  его составных элементов не распределен для использования. Если же все элементы  такого ресурса выделены для использования, то он находится в состоянии  &quot;занят&quot;. Если часть элементов ресурса распределена, а остальные  (известно какие) нет, то ресурс &quot;частично занят&quot;. </p>
  <p>По  восстанавливаемости: воспроизводимый, потребляемый. При построении механизмов  распределения ресурсов на основе использования той или иной дисциплины особенно  важно учитывать характер использования распределяемых ресурсов. По этому  признаку учитывается и сущность ресурса, возможность в этой связи восстанавливаемости  ресурса в системе после его использования. По возможности восстанавливаемости  ресурсы подразделяются на <strong>воспроизводимые  и потребляемые</strong>. Предполагаются, что в отношении каждого ресурса  процесс-пользователь выполняет три типа действий: ЗАПРОС, ИСПОЛЬЗОВАНИЕ,  ОСВОБОЖДЕНИЕ. Если при распределении системой ресурса допускается многократное  выполнение действий в последовательности запрос-использование-освобождение, то  такой ресурс называют воспроизводимым. После возвращения он доступен для  использования его другим процессом. Поэтому, если не учитывать вид изменений  ресурса при каждом разовом использовании, можно считать время жизни ресурса  бесконечно большим или достаточно большим, пока он не потеряет своих  функциональных свойств.&nbsp; В отношении  определенной категории ресурсов правомочно использование действий в следующем  порядке: освобождение-запрос-использование, после чего ресурс, который в данном  случае называют потребительным, изымается из сферы потребления (например,  отношение производитель-потребитель). Срок жизни потребляемого ресурса,  определяемый периодом между выполнением действий освобождение и использование,  конечен. В отношении процесса производителя и процесса-потребителя потребляемые  ресурсы ведут себя как временные. </p>
  <p>По  характеру использования: параллельно используемый, последовательно  используемый. Природа ресурса и (или) используемое правило распределения  ресурса обусловлены <strong>параллельной</strong> или <strong>последовательной</strong> схемой  использования распределяемого между несколькими процессами ресурса. Последовательная  схема предполагает, что в отношении некоторого ресурса, который называют  последовательно используемым, допустимо строго последовательное во времени  выполнение цепочек действий &quot;запрос-исполнение-освобождение&quot; каждым  процессом-потребителем этого ресурса для параллельных процессов такие цепочки  действий являются критическими областями и должны выполняться так, чтобы  удовлетворять правилу взаимного исключения, определенному ранее. Поэтому  последовательно используемый ресурс, разделяемый несколькими параллельными  процессами, чаще называют критическим ресурсом. Параллельная схема предполагает  параллельное, т.е. одновременное, использование одного ресурса, который поэтому  называют параллельно используемым более чем одним процессом. Такое  использование не должно вносить каких-либо ошибок в логику развития каждых из  процессов (массив в памяти для чтения). </p>
  <p>По  форме реализации: <strong>твердые и мягкие  ресурсы</strong>. Под &quot;твердыми&quot; понимают аппаратные компоненты машины, а  также человеческие ресурсы. Все остальные виды ресурсов относятся к разряду  &quot;мягких&quot;. Существенно разным для твердых и мягких ресурсов помимо  сложности и стоимости является их подверженность сбойным или отказываемым  ситуациям и последующее восстановление работоспособности. В отличие от  &quot;твердых&quot; &quot;мягкие&quot; ресурсы не могут стать  неработоспособными из-за усталостного отказа. В классе &quot;мягких&quot;  ресурсов выделяют два типа: <strong>программные  и информационные</strong>. Если &quot;мягкий&quot; ресурс допускает копирование и  эффект от использования ресурса-оригинала и ресурса-копии идентичен, то такой ресурс  называют программным мягким ресурсом. В противном случае его следует отнести к  информационному типу (это программы, файлы, массивы и т.п.). &quot;Мягкие&quot;  информационные ресурсы либо принципиально не допускают копирование, либо  допускают копирование, но оно является функцией времени. Это различного вида  потребляемые ресурсы: сообщения, сигналы прерывания, запросы к ОС на различного  вида услуги, сигналы синхронизации. Такие сообщения и сигналы информационно  значимы (доступны и ценны, как ресурс) только в течение некоторого конечного  интервала времени. Например, если в некоторую ячейку памяти записывается  периодически некоторые сообщения, то возможно копирование конкретного поступившего  сообщения от момента записи его в эту ячейку до момента поступления туда нового  сообщения. Последующее копирование уже дает другой результат от использования  выбранного сообщения.</p>
  <p>Ресурсы подразделяются на <strong>выгружаемые</strong> и <strong>невыгружаемые</strong>.  Выгружаемый ресурс можно безболезненно забирать у владеющего им процесса,  например, память. Невыгружаемый ресурс нельзя забрать от владельца, не  уничтожив результаты вычислений. Например, нельзя прервать запись  компакт-диска. </p>
  <p>В терминах ОС понятие ресурс обычно используется по  отношению к повторно используемым, относительно стабильным и зачастую  недостающим объектам, которые могут запрашиваться, использоваться и  освобождаться. </p>
  <p>При разработке первых ОС ресурсами считались процессорное  время, память, каналы ВВ и периферийные устройства. Позже понятие ресурса стало  более универсальным и общим. К ним стали относиться и разного рода программные  и информационные ресурсы, которые с точки зрения системы, также могут являться  объектами, которые возможно распределять и управлять доступом. Понятие ресурса  превратилось в абстрактную структуру с рядом атрибутов, характеризующих способы  доступа к ней и ее физическое представление в системе. Кроме системных  ресурсов, в это понятие стали включаться и такие объекты межпроцессного обмена,  как сообщения и синхросигналы.</p>
  <p>Одним из основных видов ресурсов является процессор. При  этом собственно процессор как ресурс выступает лишь для многопроцессорных  систем, в однопроцессорных же системах ресурсом является процессорное время.  Его разделение производится по параллельной схеме. Методы разделения этого  ресурса будут рассмотрены позже. </p>
  <p>Следующий вид ресурсов - память. Проблема эффективного  разделения оперативной памяти между процессами является одной из самых  актуальных. В общем случае, собственно память и доступ к ней являются разными  ресурсами. Каждый из них может быть предоставлен независимо друг от друга, но  для полной работы с памятью необходимы оба из них. </p>
  <p>Внешние устройства являются еще одним видом ресурсов. При  наличии механизмов прямого доступа они могут использоваться одновременно. Если  же устройство имеет только последовательный доступ, то оно не является  разделяемым ресурсом, например, принтер, накопитель на магнитной ленте.</p>
  <p>Программные модули так же являются одним из ресурсов.  Однократно используемые модули могут быть правильно выполнены только один раз,  в процессе работы они могут либо испортить свой код, либо исходные данные.  Такие модули являются неделимым ресурсом. Повторно используемые модули могут  быть непривилегированными, привилегированными, реентерабельными и повторно  входимыми. </p>
Данные выступают в качестве информационных  ресурсов. Это либо переменные в ОЗУ, либо файлы. В случае использования данных  только для чтения, они легко разделяются. В случае же разрешения процессам  изменения этого вида ресурса, то проблема его разделения значительно  усложняется.
</BODY>
</HTML>