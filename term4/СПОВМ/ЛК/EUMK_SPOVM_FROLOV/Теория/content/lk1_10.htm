<!-- (C) 2011-2012 V.Prytkov, V. Suponev, A.Uvarov. BSUIR -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<META HTTP-EQUIV="Content-Language" CONTENT="ru">
<link rel="stylesheet" type="text/css" href="../css/style.css" />
<title>Лекция №10. Поддержка подсистемы памяти в современных архитектурах.</title>
<base target="_top">
</HEAD><BODY>
  <p align="center"><strong>Поддержка подсистемы памяти в современных архитектурах</strong></p>
  <p><em>Поддержка  сегментно-страничной организации памяти в процессорах семейства Pentium.  Структура элемента таблицы страниц. Таблица страничных блоков. Отдельные  пространства команд и данных. Совместно используемые страницы. Проблемы,  возникающие при вызове страничного прерывания. Распределение&nbsp; оперативной памяти в Windows NT, UNIX</em></p>
  <p><strong>Поддержка  сегментно-страничной организации памяти в системах на основе Pentium.</strong><br />
    <img src="../images/1sem_theory_p9_clip_image017.gif" alt="9" width="173" height="84" hspace="12" align="left" />Система  Pentium поддерживает 16К независимых сегментов виртуальной памяти процесса ,  каждый объемом до 1 млрд. 32 разрядных слов. Основа виртуальной памяти состоит  из двух таблиц: локальной таблицы дескрипторов LDT и глобальной GDT. LDT  имеется своя у каждого процесса, GDT одна, используемая совместно всеми процессами.  LDT таблица описывает сегменты, локальные для каждой программы &ndash; код, данные,  стек и т.д. GDT несет информацию о системных сегментах, включая саму ОС.<br />
    <img src="../images/1sem_theory_p9_clip_image019.gif" alt="10" width="502" height="161" hspace="12" align="right" /> <br />
    При получении доступа к&nbsp;  сегменту, программа сначала загружает для этого сегмента в один из 6  сегментных регистров процессора селектор. Регистр CS содержит селектор для  сегмента кода команд, DS&nbsp; - данных. Селектор  представляет собой 16разрядую структуру. Один бит несет информацию, является ли  данный сегмент локальным или глобальным. Еще 13 определяют номер записи в  таблице дескрипторов, каждая из которых имеет длину 8 байт. Соответственно  таблица дескрипторов не может иметь более 8К записей. Селектор 0 является  запрещенным. Его можно загрузить в сегментный регистр, чтобы обозначить, что  этот регистр недоступен. При попытке обращения к такому регистру, возникнет  прерывание. После определения, в какой таблице расположен соответствующий  дескриптор, селектор копируется во внутренний рабочий регистр, и три младших  бита приравниваются к 0. После этого к нему прибавляется адрес соответствующей  таблицы, чтобы получить прямой указатель на дескриптор. Например, код 48h  ссылается на 9 запись в глобальной таблице, которая имеет смещение 48h  (9*8=72=48h) от начала таблицы. При загрузке селектора в регистр  соответствующий дескриптор извлекается из таблицы GDT или LDT и сохраняется в  микропрограммных регистрах, что обеспечивает к нему быстрый доступ. Дескриптор  имеет размер 8 байт следующей структуры. Пара селектор-смещение при выполнении  кода должна преобразовываться в физический адрес. Как только из кода микропрограммы  становится ясно, какой сегментный регистр используется, во внутренних регистрах  находится полный дескриптор, соответствующий этому селектору. Если сегмент не  существует (селектор равен 0), или в данный момент выгружен, возникает прерывание.  Далее микропрограмма проверяет, выходит ли смещение за пределы сегмента, и если  это так, вызывается прерывание. Для определения размера в дескрипторе имеется  поле Limit длиной 20 бит.&nbsp; Если поле G  (granularity &ndash; детализация) =0, то Limit содержит точный размер сегмента  размером до 1 Мб. Если 1 &ndash; то размер сегмента указан в страницах вместо  байт.&nbsp; При размере страницы 4 Кб, этого  достаточно для адресации сегментов размером 232 байт. После всех  проверок система прибавляет 32-разрядное поле Base дескриптора к смещению,  формируя т.н. <strong>линейный адрес</strong>. Поля  Base и Limit разбиты на части для совместимости с устаревшими системами, например,  Base в i80286 имеет только 24 бита. </p>
  <p>Если разбиение на страницы блокировано с помощью бита в  глобальном управляющем регистре, линейный адрес интерпретируется как физический  адрес и используется для чтения записи памяти. Фактически это чистая схема сегментации  с базовым адресом сегмента, определяемым дескриптором.</p>
  <p>Если страничная организация не отключена, линейный адрес  интерпретируется как виртуальный и отображается на физический с помощью таблицы  страниц. Однако при этом при 32 разрядном виртуальном адресе и странице  размером 4 Кб, сегмент может содержать до 1 миллиона страниц, поэтому  используется двухуровневое отображение чтобы уменьшить размер таблицы страниц.  Линейный адрес представляется в этом случае тремя полями: каталог 10 бит,  Страница 10 бит и смещение 12 бит. Таблица первого уровня, страничный каталог,  содержит 1024 32 разрядных записи и располагается по адресу, хранящемуся в  глобальном регистре. Поле каталог является индексом для этой таблицы (номером  записи). Запись содержит адрес таблицы страниц, содержащую 1024 32-разрядных  записей. Поле страница указывает номер записи в этой таблице. Запись указывает  на соответствующий страничный блок, поле смещение определяет смещение  относительно начала блока. Каждая таблица страниц управляет фактически 4 Мб  памяти. Чтобы избежать повторного обращения к памяти, имеется небольшой буфер  TLB, который напрямую отображает наиболее часто используемые комбинации  каталог-страница на физический адрес страничного блока.</p>
  <p>В случае, когда не требуется сегментной организации и  достаточно только страничной, сегментные регистры все настраиваются селектором,  в соответствующем дескрипторе которого Base=0 и Limit установлено на максимум.  Тогда смещение команды будет линейным адресом. Все современные ОС работают  именно по такой схеме, т.е. возможности сегментной организации не используются.  Эти возможности поддерживала OS/2. </p>
  <p><strong>Элемент  таблицы страниц</strong> второго уровня в Win32 имеет следующую 32 битную структуру:</p>
  <table border="1" cellspacing="0" cellpadding="0">
    <tr>
      <td width="317" valign="top"><br />
        Номер    страничного блока (фрейма страницы) </td>
      <td width="26" valign="top"><p align="center">U</p></td>
      <td width="26" valign="top"><p align="center">P</p></td>
      <td width="26" valign="top"><p align="center">Cw</p></td>
      <td width="26" valign="top"><p align="center">Gl</p></td>
      <td width="26" valign="top"><p align="center">L</p></td>
      <td width="26" valign="top"><p align="center">D</p></td>
      <td width="26" valign="top"><p align="center">A</p></td>
      <td width="26" valign="top"><p align="center">Cd</p></td>
      <td width="26" valign="top"><p align="center">Wt</p></td>
      <td width="26" valign="top"><p align="center">O</p></td>
      <td width="26" valign="top"><p align="center">W</p></td>
      <td width="26" valign="top"><p align="center">V</p></td>
    </tr>
    <tr>
      <td width="317" valign="top"><p align="center">31 &ndash; 12</p></td>
      <td width="26" valign="top"><p align="center">11</p></td>
      <td width="26" valign="top"><p align="center">10</p></td>
      <td width="26" valign="top"><p align="center">9</p></td>
      <td width="26" valign="top"><p align="center">8</p></td>
      <td width="26" valign="top"><p align="center">7</p></td>
      <td width="26" valign="top"><p align="center">6</p></td>
      <td width="26" valign="top"><p align="center">5</p></td>
      <td width="26" valign="top"><p align="center">4</p></td>
      <td width="26" valign="top"><p align="center">3</p></td>
      <td width="26" valign="top"><p align="center">2</p></td>
      <td width="26" valign="top"><p align="center">1</p></td>
      <td width="26" valign="top"><p align="center">0</p></td>
    </tr>
  </table>
  <p>Он состоит из 2 больших полей &ndash; номера страницы в физической  памяти (или ее физического адреса) и поля атрибутов. Атрибуты:<br />
    U &ndash;резерв, в многопроцессорных системах указывает, можно ли  записывать на эту страницу<br />
    P &ndash; резерв <br />
    Cw &ndash; резерв<br />
    Gl &ndash;Global &ndash; трансляция  относится ко всем процессам<br />
    L &ndash;Large  page &ndash; резерв, для элемента каталога страниц указывает, что  элемент относится к 4 (2) Mb странице<br />
    D &ndash;Dirty &ndash; страница  модифицирована<br />
    A &ndash;Accessed  &ndash; была операция чтения с данной страницы<br />
    Cd &ndash;Cashe  disabled &ndash; кэширование данной страницы отключено<br />
    Wt &ndash;Write  through &ndash; отключает кэширование записи на данную страницу, в  результате чего все измененные данные сбрасываются непосредственно на диск<br />
    O &ndash;Owner &ndash; указывает,  доступна ли страница из кода пользовательского режима<br />
    W &ndash;Write &ndash; в  многопроцессорных системах указывает, можно ли записывать на эту страницу, в  однопроцессорных &ndash; тип доступа (для чтения и записи или только для чтения)<br />
    V &ndash; Valid &ndash; указывает,  соответствует ли элемент странице в физической памяти<br />
    В случае, если страница не является действительной, т.е.  младший бит = 0, состав и назначение остальных полей изменяется.</p>
  <p>Современные Windows  системы поддерживают механизм  проецирования памяти PAE (Physical Address Extension).  При соответствующей поддержке чипсетом, этот режим позволяет адресовать 64 Гб  физической памяти или 1024 Гб на платформе х64. Widows ограничивает возможности этого режима  до 128 Гб из-за размера таблицы страничных блоков. В этом режиме фактически  используется 3-уровневая таблица страниц. Соответственно виртуальный адрес  делится на 4 поля: 2 бита &ndash; индекс указателя на каталог страниц, 10 бит &ndash; номер  таблицы страниц&nbsp; в каталоге страниц, 8  бит &ndash; номер страницы в таблице страниц, 12 бит &ndash; смещение на странице. Платформа  х64 использует 4 уровневую схему таблицы страниц. Пока для виртуального адреса  используется не 64 , а только 48 бит: 9,9,9,9 и 12 бит на смещение.</p>
  <p><strong>Таблица  страничных блоков. </strong>&nbsp;Windows поддерживает базу данных PFN  (Page Frame Number), определяющую  состояние каждой страницы физической памяти. Состояния страницы могут быть  следующими:</p>
  <ol>
    <li>активная (действительная)(Active/valid).  Является либо частью рабочего набора процесса или ОС, либо не входит не в один  рабочий набор, но на нее ссылается действительный элемент таблицы страниц (PTE &ndash; Page  Table Entry).</li>
    <li>Переходная (Transition). Временное состояние страницы, не принадлежащей ни одному  рабочему набору. Страница находится в этом состоянии в ходе операций  ввода-вывода.</li>
    <li>Простаивающая (stand by)  Страница входила ранее в рабочий набор, но теперь удалена из него. С момента  последней записи на диск не изменялась. PTE  все еще ссылается на нее, но уже помечен как недействительный и находящийся в  переходном состоянии.</li>
    <li>Модифицированная (Modified). Страница входила ранее в рабочий набор, но теперь удалена  из него. Однако она была изменена и еще не записана на диск. PTE все еще ссылается на нее, но уже помечен как  недействительный и находящийся в переходном состоянии. Перед повторным  использованием страницы она должна быть записана на диск.</li>
    <li>Модифицированная, но не записываемая (Modified no-write). Аналогичная ситуация, однако подсистема записи модифицированных  страниц не будет записывать ее на диск. Используется драйверами файловой  системы. </li>
    <li>Свободная (free).  Свободна, но содержит какие-то данные. Нельзя передать пользовательскому  процессу, пока не произойдет обнуление.</li>
    <li>Обнуленная (Zeroed)  Свободна и инициализирована нулевыми значениями.</li>
    <li>Только для чтения (ROM). Ошибка страницы была вызвана из памяти только для чтения  (Windows XP)</li>
    <li>Аварийная (Bad)  Страница вызвала ошибку четности или другую аппаратную ошибку. Больше  использовать нельзя.</li>
  </ol>
  <p>Запись базы PFN  имеет фиксированную длину, однако ее  структура зависит от состояния страницы. Так, она может включать индекс  рабочего набора, который содержит виртуальный адрес, по которому проецируется  эта страница; Адрес PTE,  указывающий на данную страницу, счетчик числа ссылок, счетчик числа  пользователей, Тип страницы, флаги, исходное содержимое PTE, указывающего на страницу, что позволяет его  восстанавливать, когда физическая страница более не резидентна, и ряд других  полей.</p>
  <p>В каждый момент времени программа находится на одном из  имеющихся 4 уровней защиты, что отмечается 2 битовым полем в регистре слова  состояния программы (PSW). Каждый сегмент системы также имеет свой уровень. Как  правило, 3 уровень &ndash; это пользовательские программы, 2 &ndash; библиотеки совместного  доступа, 1 &ndash; системные узлы и 0 &ndash; ядро. Разрешен доступ к данным на своем и  более высоких уровнях. При попытке доступа к данным низкого уровня вызываются  прерывания. Вызов процедур как высокого, так и низкого уровня допускается,  однако для этого инструкция CALL должна содержать селектор вместо адреса. Этот  селектор определяет дескриптор, т.н. <strong>шлюз  вызова</strong> (call gate), который передает адрес вызываемой процедуры. Т.о.,  попасть в середину произвольного сегмента кода другого уровня невозможно. Могут  использоваться только стандартные точки входа. </p>
  <p>Программные и аппаратные прерывания используют подобный  механизм. Они также обращаются к дескрипторам , а не к абсолютным адресам,  которые указывают на определенные процедуры. Поле тип в дескрипторе позволяет  различить программные сегменты, сегменты данных и различные виды шлюзов.</p>
  <p><strong>Win 9x.</strong> ОС этого семейства являются 32 разрядными, многопоточными  ОС с вытесняющей многозадачностью. Пользовательский интерфейс &ndash; графический.  При загрузке используется ОС MS DOS 7.X. В случае, если в файле MSDOS.SYS установлено  BootGUI = 0, то процессор работает в реальном режиме. Распределение памяти  MS-DOS этой версии не отличается от предыдущих версий DOS. При загрузке GUI  перед загрузкой ядра Win 9x процессор переключается в защищенный режим и  распределяет память с помощью страничного механизма, т.е. используется плоская  модель памяти, при которой все возможные сегменты, доступные программисту,  совпадают и имеют максимально возможный размер. Каждая прикладная программа  определяется 32 битными адресами, единственный сегмент программы отображается  непосредственно в область виртуального линейного адресного пространства, состоящего  из страниц размером по 4 Кб. </p>
  <p>0-64 Кб&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; В  эту область не имеют доступа 32-разрядные программы, что позволяет выполнить  перехват неверных указателей, однако 16-разрядные программы могут выполнить  запись в эту область.<br />
    64 Кб - 4 Мб&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Компоненты  реального режима. Эта область используется всеми процессами. Это сделано для  обеспечения совместимости с драйверами устройств реального режима, резидентными  программами и некоторыми 16разрядными программами Win. Это снижает надежность<br />
    4 Мб &ndash; 2 Гб&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Прикладные  программы Win32. У каждой прикладной программы имеется свое собственное  адресное пространство. Оно невидимо для других процессов и они как правило не  могут получить к нему доступ. Однако в принципе это возможно, поскольку не  используются все аппаратные возможности защиты. <br />
    2 Гб - 4 Гб&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Отображаются  в адресное пространство каждой программы и совместно используются. Это  позволяет обслуживать вызовы&nbsp; API  непосредственно в адресном пространстве прикладной программы. Естественно это  снижает надежность.<br />
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2 Гб &ndash;  3 Гб&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Системные dll, прикладные  программы Win16, совместно используемые dll. Все 16битные программы Win  разделяют общее адресное пространство.<br />
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3 Гб &ndash;  4 Гб&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 32разрядные микропроцессоры  i80х86 имеют четыре уровня (кольца) защиты. Кольцо 0 самое защищенное здесь. К  нему относятся следующие компоненты: собственно ядро windows, подсистема  управления виртуальными машинами, модули файловой системы, виртуальные  драйверы.</p>
  <p>Минимально допустимый объем ОЗУ, с которым Win9х может  функционировать&nbsp; -4 Mб, однако при этом  система практически висит из-за необходимости подкачки практически каждой  страницы, к которой происходит обращение. Файл подкачки по умолчанию находится  в системном каталоге Windows, имеет переменный размер. При этом файл  естественно фрагментируется, что снижает оперативность доступа. Файл подкачки  фиксированного размера&nbsp; позволяет  увеличить быстродействие. Соответствующие параметры прописаны в SYSTEM.INI в  секции&nbsp; 386Enh. <br />
    PagingDrive = C:<br />
    PagingFile = C:\PageFile.sys&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //  имя и местоположение файла подкачки&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //  Win386.swp<br />
    MinPagingFileSize = 65536&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //  его размер<br />
    MaxPagingFileSize = 262144</p>
  <p><strong>Win NT.</strong> Аналогично используется плоская модель памяти. Ядро системы  и несколько драйверов работают в 0 кольце защиты в отдельном адресном  пространстве. Остальные программные модули ОС, являясь серверными процессами по  отношению к пользовательским программам, также имеют свое собственное  виртуальное адресное пространство, которое недоступно пользовательским  процессам. </p>
  <p>0 &ndash; 64 Кб&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; полностью  недоступная область<br />
    64 Кб &ndash; 2 Гб&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Прикладные  программы Win32 со своим собственным виртуальным адресным пространством.  Прикладные программы полностью изолированы друг от друга, хотя могут общаться  через буфер обмена (clipboard), а также механизмы DDE (Dynamic Data Exchange &ndash;  механизм динамического обмена данными) и OLE (Object Linking and Embedding) &ndash;  механизм связи и внедрения объектов. <br />
    В верхней части каждой 2Гб области прикладной программы  размещен код системных dll 3 кольца, который перенаправляет вызовы в совершенно  изолированное адресное пространство, содержащее собственно системный код. Этот  системный код, выступающий в роли сервер-процесса, проверяет значения  параметров, выполняет запрошенную функцию и возвращает результат назад в  адресное пространство прикладной программы. Оставаясь процессом прикладного  уровня, сервер-процесс полностью защищен от прикладной программы.<br />
    2 Гб - 4 Гб.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Код  ядра (0 кольцо защиты). Здесь располагаются низкоуровневые системные  компоненты, в т.ч.&nbsp; ядро, планировщик  потоков и диспетчер виртуальной памяти. </p>
  <p>Для 16разрядных прикладных Win программ реализуются сеансы  WOW (Windows on Windows), что позволяет выполнять 16разрядные приложения не  только в разделяемом адресном пространстве, но и при необходимости в  собственном пространстве памяти. Независимо от этого может использоваться  механизм OLE. Может одновременно выполняться несколько сеансов DOS. </p>
  <p>При запуске приложения создается процесс со своей  информационной структурой. В его рамках запускается поток. При необходимости  этот поток может запускать другие потоки. Потоки одного процесса выполняются в  едином виртуальном адресном пространстве, процессы &ndash; в разных. Отображение  виртуальных адресных пространств на физическую память реализует сама ОС.  Процессами управления памятью управляет диспетчер виртуальной памяти VMM (virtual  memory manager).&nbsp; При этом используется  достаточно сложная стратегия учета для минимизации доступа к диску. </p>
  <p>Каждая виртуальная страница памяти, отображаемая на  физическую страницу, переносится в страничный фрейм. Прежде чем код или данные  можно будет переместить с диска в память, VMM должен найти или создать  свободный страничный фрейм или фрейм заполненный нулями, что отвечает  требованиям безопасности уровня С2. Для замещения страниц используется  дисциплина FIFO, что снижает эффективность. Размер файла подкачки по умолчанию  устанавливается равным объему ОЗУ + 12 Мб.</p>
  <p>Объекты, создаваемые и используемые ОС и приложениями,  хранятся в пулах памяти. Доступ к пулам может быть получен только в  привилегированном режиме работы процессора. Объекты перемещаемого пула при  необходимости могут быть выгружены на диск. Неперемещаемый пул содержит  объекты, которые должны постоянно находиться в памяти &ndash; например, структуры  данных, используемые процедурами обработки прерываний. </p>
<p align="center">&nbsp;</p>

</BODY>
</HTML>