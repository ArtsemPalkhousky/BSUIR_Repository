EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
tetris.com -- emu8086 assembler version: 4.05  
 
[ 16.06.2021  --  12:25:05 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ;asm Tetris - just for fun
[   2]        :                                       
[   3]        :                                       CSEG    segment word public 'CODE'
[   4]        :                                       assume  CS:CSEG, DS:CSEG
[   5]        :                                       org  100h
[   6]    0100: B8 03 00                              start:  mov  ax, 03h
[   7]    0103: CD 10                                 int  10h
[   8]        :                                       
[   9]    0105: E8 26 02                              newGame:call initGame
[  10]    0108: E8 00 02                              	    call initFigure
[  11]    010B: E8 BE 03                              	    call put
[  12]    010E: EB 11                                 	    jmp Main
[  13]        :                                       
[  14]    0110: E8 F8 01                              newFig: call initFigure
[  15]    0113: E8 69 03                              call tryPut
[  16]    0116: 3D 00 00                              cmp ax, 0
[  17]    0119: 74 03 E9 C8 01                        jne exit
[  18]    011E: E8 AB 03                              call put
[  19]        :                                       ;---- Main game cycle
[  20]    0121: E8 53 02                              Main:   call drawField
[  21]    0124: E8 C6 01                              call getTime
[  22]    0127: 03 06 57 06                           add  ax, delayValue
[  23]    012B: A3 59 06                              mov  timer,ax
[  24]    012E: B8 00 01                              cycle:  mov  ax, 0100h
[  25]    0131: CD 16                                 int  16h
[  26]    0133: 75 03 E9 9F 01                        jz   nokeys
[  27]        :                                       
[  28]    0138: 33 C0                                 xor  ax,ax
[  29]    013A: CD 16                                 int  16h
[  30]        :                                       
[  31]    013C: BE 36 07                              mov  si,offset figure
[  32]    013F: 80 FC 4B                              cmp  ah,4bh ;left
[  33]    0142: 75 58                                 jnz  other1
[  34]    0144:                                       leftMark:
[  35]    0144: E8 C4 03                              call clearCurrFig
[  36]        :                                       
[  37]    0147: A1 51 06                              mov ax, FigX
[  38]    014A: 3D 00 00                              cmp ax, 0
[  39]    014D: 74 13                                 je tryLeft
[  40]        :                                       
[  41]    014F: 2D 01 00                              sub ax, 1
[  42]    0152: A3 51 06                              mov FigX, ax
[  43]        :                                       
[  44]    0155: E8 27 03                              call tryPut
[  45]        :                                       
[  46]    0158: 3D 00 00                              cmp ax, 0
[  47]    015B: 75 31                                 jne noLeft
[  48]        :                                       
[  49]    015D: E8 6C 03                              call put
[  50]        :                                       
[  51]    0160: EB BF                                 jmp short Main
[  52]    0162:                                       tryLeft:
[  53]    0162: BE 36 07                              lea si, figure
[  54]    0165: BF 3F 07                              lea di, oldFigure
[  55]        :                                       
[  56]    0168: 51                                    push cx
[  57]    0169: B9 09 00                              mov cx, 9
[  58]    016C: E8 C8 01                              call copy
[  59]    016F: 59                                    pop cx
[  60]        :                                       
[  61]    0170: E8 91 02                              call moveLeft
[  62]    0173: E8 09 03                              call tryPut
[  63]        :                                       
[  64]    0176: 3D 00 00                              cmp ax, 0
[  65]    0179: 74 0E                                 je moveLeftAtOnce
[  66]        :                                       
[  67]    017B: BE 3F 07                              lea si, oldFigure
[  68]    017E: BF 36 07                              lea di, figure
[  69]        :                                       
[  70]    0181: 51                                    push cx
[  71]    0182: B9 09 00                              mov cx, 9
[  72]    0185: E8 AF 01                              call copy
[  73]    0188: 59                                    pop cx
[  74]    0189:                                       moveLeftAtOnce:
[  75]    0189: E8 40 03                              call put
[  76]    018C: EB 93                                 jmp short Main
[  77]        :                                       
[  78]    018E:                                       noLeft:
[  79]    018E: A1 51 06                              mov ax, FigX
[  80]    0191: 05 01 00                              add ax, 1
[  81]    0194: A3 51 06                              mov FigX, ax
[  82]        :                                       
[  83]    0197: E8 32 03                              call put
[  84]    019A: EB 85                                 jmp short Main
[  85]        :                                       
[  86]    019C: 80 FC 4D                              other1: cmp  ah,4dh ;right
[  87]    019F: 75 74                                 jnz  other2
[  88]    01A1:                                       rightMark:
[  89]    01A1: E8 67 03                              call clearCurrFig
[  90]        :                                       
[  91]    01A4: B8 0C 00                              mov ax, coloumns
[  92]    01A7: 2D 03 00                              sub ax, 3
[  93]    01AA: 8B D8                                 mov bx, ax
[  94]    01AC: 8B C8                                 mov cx, ax
[  95]    01AE: 83 C1 01                              add cx, 1
[  96]    01B1: A1 51 06                              mov ax, FigX
[  97]    01B4: 05 01 00                              add ax, 1
[  98]    01B7: A3 51 06                              mov FigX, ax
[  99]    01BA: 3B C1                                 cmp ax, cx
[ 100]    01BC: 74 12                                 je tryRight
[ 101]    01BE: 3B C3                                 cmp ax, bx
[ 102]    01C0: 77 44                                 ja noRight
[ 103]        :                                       
[ 104]    01C2: E8 BA 02                              call tryPut
[ 105]    01C5: 3D 00 00                              cmp ax, 0
[ 106]    01C8: 75 3C                                 jne noRight
[ 107]        :                                       
[ 108]    01CA: E8 FF 02                              call put
[ 109]        :                                       
[ 110]    01CD: E9 51 FF                              jmp short Main
[ 111]    01D0:                                       tryRight:
[ 112]    01D0: A1 51 06                              mov ax, FigX
[ 113]    01D3: 2D 01 00                              sub ax, 1
[ 114]    01D6: A3 51 06                              mov FigX, ax
[ 115]        :                                       
[ 116]    01D9: BE 36 07                              lea si, figure
[ 117]    01DC: BF 3F 07                              lea di, oldFigure
[ 118]        :                                       
[ 119]    01DF: 51                                    push cx
[ 120]    01E0: B9 09 00                              mov cx, 9
[ 121]    01E3: E8 51 01                              call copy
[ 122]    01E6: 59                                    pop cx
[ 123]        :                                       
[ 124]    01E7: E8 DC 01                              call moveRight
[ 125]    01EA: E8 92 02                              call tryPut
[ 126]        :                                       
[ 127]    01ED: 3D 00 00                              cmp ax, 0
[ 128]    01F0: 74 0E                                 je moveRightAtOnce
[ 129]        :                                       
[ 130]    01F2: BE 3F 07                              lea si, oldFigure
[ 131]    01F5: BF 36 07                              lea di, figure
[ 132]        :                                       
[ 133]    01F8: 51                                    push cx
[ 134]    01F9: B9 09 00                              mov cx, 9
[ 135]    01FC: E8 38 01                              call copy
[ 136]    01FF: 59                                    pop cx
[ 137]    0200:                                       moveRightAtOnce:
[ 138]    0200: E8 C9 02                              call put
[ 139]    0203: E9 1B FF                              jmp short Main
[ 140]    0206:                                       noRight:
[ 141]    0206: A1 51 06                              mov ax, FigX
[ 142]    0209: 2D 01 00                              sub ax, 1
[ 143]    020C: A3 51 06                              mov FigX, ax
[ 144]        :                                       
[ 145]    020F: E8 BA 02                              call put
[ 146]        :                                       
[ 147]    0212: E9 0C FF                              jmp short Main   ;think about newFig
[ 148]        :                                       
[ 149]    0215: 80 FC 48                              other2: cmp  ah,48h ;up / rotate
[ 150]    0218: 75 36                                 jnz  other3
[ 151]    021A:                                       rotateMark:
[ 152]    021A: E8 EE 02                              call clearCurrFig
[ 153]        :                                       
[ 154]    021D: BE 36 07                              lea si, figure
[ 155]    0220: BF 3F 07                              lea di, oldFigure
[ 156]        :                                       
[ 157]    0223: 51                                    push cx
[ 158]        :                                       
[ 159]    0224: B9 09 00                              mov cx, 9
[ 160]    0227: E8 0D 01                              call copy
[ 161]        :                                       
[ 162]    022A: 59                                    pop cx
[ 163]        :                                       
[ 164]    022B: E8 1D 03                              call rotateFig
[ 165]        :                                       
[ 166]    022E: E8 4E 02                              call tryPut
[ 167]        :                                       
[ 168]    0231: 3D 00 00                              cmp ax, 0
[ 169]    0234: 75 06                                 jne noRotate
[ 170]        :                                       
[ 171]    0236: E8 93 02                              call put
[ 172]        :                                       
[ 173]    0239: E9 E5 FE                              jmp short Main
[ 174]        :                                       
[ 175]    023C:                                       noRotate:
[ 176]    023C: BE 3F 07                              lea si, oldFigure
[ 177]    023F: BF 36 07                              lea di, figure
[ 178]        :                                       
[ 179]    0242: 51                                    push cx
[ 180]    0243: B9 09 00                              mov cx, 9
[ 181]    0246: E8 EE 00                              call copy
[ 182]    0249: 59                                    pop cx
[ 183]        :                                       
[ 184]    024A: E8 7F 02                              call put
[ 185]        :                                       
[ 186]    024D: E9 D1 FE                              jmp short Main
[ 187]        :                                       
[ 188]    0250: 80 FC 01                              other3: cmp  ah,1 ;Escape
[ 189]    0253: 75 03 E9 8E 00                        jz   exit
[ 190]        :                                       
[ 191]        :                                       
[ 192]    0258: 80 FC 50                              cmp  ah,50h ;down
[ 193]    025B: 75 7A                                 jnz nokeys
[ 194]    025D:                                       downMark:
[ 195]    025D: E8 AB 02                              call clearCurrFig
[ 196]        :                                       
[ 197]    0260: B8 12 00                              mov ax, rows
[ 198]    0263: 2D 03 00                              sub ax, 3
[ 199]    0266: 8B D8                                 mov bx, ax
[ 200]    0268: 8B C8                                 mov cx, ax
[ 201]    026A: 83 C1 01                              add cx, 1
[ 202]    026D: A1 53 06                              mov ax, FigY
[ 203]    0270: 05 01 00                              add ax, 1
[ 204]    0273: A3 53 06                              mov FigY, ax
[ 205]    0276: 3B C1                                 cmp ax, cx
[ 206]    0278: 74 12                                 je tryDown
[ 207]    027A: 3B C3                                 cmp ax, bx
[ 208]    027C: 77 47                                 ja noDown
[ 209]        :                                       
[ 210]    027E: E8 FE 01                              call tryPut
[ 211]    0281: 3D 00 00                              cmp ax, 0
[ 212]    0284: 75 3F                                 jne noDown
[ 213]        :                                       
[ 214]    0286: E8 43 02                              call put
[ 215]        :                                       
[ 216]    0289: E9 95 FE                              jmp short Main
[ 217]    028C:                                       tryDown:
[ 218]    028C: A1 53 06                              mov ax, FigY
[ 219]    028F: 2D 01 00                              sub ax, 1
[ 220]    0292: A3 53 06                              mov FigY, ax
[ 221]        :                                       
[ 222]    0295: BE 36 07                              lea si, figure
[ 223]    0298: BF 3F 07                              lea di, oldFigure
[ 224]        :                                       
[ 225]    029B: 51                                    push cx
[ 226]    029C: B9 09 00                              mov cx, 9
[ 227]    029F: E8 95 00                              call copy
[ 228]    02A2: 59                                    pop cx
[ 229]        :                                       
[ 230]    02A3: E8 9D 01                              call moveDown
[ 231]    02A6: E8 D6 01                              call tryPut
[ 232]        :                                       
[ 233]    02A9: 3D 00 00                              cmp ax, 0
[ 234]    02AC: 74 0E                                 je moveDownAtOnce
[ 235]        :                                       
[ 236]    02AE: BE 3F 07                              lea si, oldFigure
[ 237]    02B1: BF 36 07                              lea di, figure
[ 238]        :                                       
[ 239]    02B4: 51                                    push cx
[ 240]    02B5: B9 09 00                              mov cx, 9
[ 241]    02B8: E8 7C 00                              call copy
[ 242]    02BB: 59                                    pop cx
[ 243]    02BC:                                       moveDownAtOnce:
[ 244]    02BC: E8 0D 02                              call put
[ 245]    02BF: E8 BA 02                              call checkLines
[ 246]    02C2: E9 4B FE                              jmp short newFig
[ 247]        :                                       
[ 248]    02C5:                                       noDown:
[ 249]    02C5: A1 53 06                              mov ax, FigY
[ 250]    02C8: 2D 01 00                              sub ax, 1
[ 251]    02CB: A3 53 06                              mov FigY, ax
[ 252]        :                                       
[ 253]    02CE: E8 FB 01                              call put
[ 254]    02D1: E8 A8 02                              call checkLines
[ 255]        :                                       
[ 256]    02D4: E9 39 FE                              jmp short newFig   ;think about newFig
[ 257]        :                                       
[ 258]    02D7: E8 13 00                              nokeys: call getTime
[ 259]    02DA: 3B 06 59 06                           cmp  ax, timer
[ 260]    02DE: 7D 03 E9 4B FE                        jl   cycle
[ 261]        :                                       
[ 262]    02E3: E9 77 FF                              jmp downMark
[ 263]        :                                       
[ 264]    02E6: B8 03 00                              exit:   mov  ax,3
[ 265]    02E9: CD 10                                 int  10h
[ 266]    02EB: CD 20                                 int  20h
[ 267]        :                                       
[ 268]    02ED:                                       getTime:
[ 269]    02ED: 1E                                    push ds
[ 270]    02EE: 33 C0                                 xor  ax,ax
[ 271]    02F0: 8E D8                                 mov  ds,ax
[ 272]    02F2: 3E A1 6C 04                           mov  ax,word ptr ds:[46ch]
[ 273]    02F6: 1F                                    pop  ds
[ 274]    02F7: C3                                    ret
[ 275]        :                                       
[ 276]        :                                       
[ 277]    02F8:                                       random  proc
[ 278]    02F8:                                       loopRand:
[ 279]    02F8: E5 40                                 in ax, 40h
[ 280]    02FA: FE C0                                 inc al
[ 281]    02FC: 24 05                                 and al, 05h
[ 282]    02FE: 3C 05                                 cmp al, 05h
[ 283]    0300: 74 F6                                 je  loopRand
[ 284]    0302: A2 35 07                              mov randValue, al
[ 285]    0305: 33 C0                                 xor ax, ax
[ 286]    0307: A0 35 07                              mov al, randValue
[ 287]    030A: C3                                    ret
[ 288]        :                                       endp
[ 289]        :                                       
[ 290]        :                                       
[ 291]    030B:                                       initFigure proc
[ 292]    030B: E8 EA FF                              call random
[ 293]    030E: BB 09 00                              mov  bx,9
[ 294]    0311: F7 E3                                 mul  bx
[ 295]    0313: 05 23 06                              add  ax, offset TetrisFigures
[ 296]    0316: 8B F0                                 mov  si,ax
[ 297]    0318: BF 36 07                              mov  di, offset figure
[ 298]    031B: B9 09 00                              mov  cx, 9
[ 299]    031E: E8 16 00                              call copy ;---- copy figure
[ 300]        :                                       ;xor  ax, ax
[ 301]    0321: B8 00 00                              mov  ax, 0
[ 302]    0324: A3 53 06                              mov  FigY, ax
[ 303]    0327: B8 00 00                              mov  ax, 0
[ 304]    032A: A3 51 06                              mov  FigX, ax
[ 305]    032D: C3                                    ret
[ 306]        :                                       endp
[ 307]        :                                       
[ 308]    032E:                                       initGame proc
[ 309]    032E: 33 C0                                 xor  ax,ax
[ 310]    0330: B9 D8 00                              mov  cx, fieldSize
[ 311]    0333: E8 05 00                              call printBorder
[ 312]    0336: C3                                    ret
[ 313]        :                                       endp
[ 314]        :                                       
[ 315]    0337:                                       copy    proc
[ 316]        :                                       ; si -- source
[ 317]        :                                       ; di -- destination
[ 318]    0337: FC                                    cld
[ 319]    0338: F3 A4                                 rep movsb
[ 320]    033A: C3                                    ret
[ 321]        :                                       endp
[ 322]        :                                       
[ 323]        :                                       
[ 324]        :                                       
[ 325]    033B:                                       printBorder proc
[ 326]    033B: 06                                    push es
[ 327]    033C: 53                                    push bx
[ 328]        :                                       
[ 329]    033D: B8 00 B8                              mov ax, 0b800h
[ 330]    0340: 8E C0                                 mov es, ax
[ 331]    0342: BF 00 00                              mov di, 0
[ 332]        :                                       
[ 333]    0345: B9 12 00                              mov cx, rows
[ 334]    0348:                                       loopVertical:
[ 335]    0348: 26 C6 05 7C                           mov es:[di], '|'
[ 336]    034C: B8 0C 00                              mov ax, coloumns
[ 337]    034F: 05 01 00                              add ax, 1
[ 338]    0352: 03 C0                                 add ax, ax
[ 339]    0354: 8B D8                                 mov bx, ax
[ 340]    0356: 03 FB                                 add di, bx
[ 341]    0358: 26 C6 05 7C                           mov es:[di], '|'
[ 342]    035C: B8 A0 00                              mov ax, 160
[ 343]    035F: 2B C3                                 sub ax, bx
[ 344]    0361: 03 F8                                 add di, ax
[ 345]    0363: E2 E3                                 loop loopVertical
[ 346]        :                                       
[ 347]    0365: B9 0C 00                              mov cx, coloumns
[ 348]    0368: 83 C1 02                              add cx, 2
[ 349]    036B:                                       loopHorizontal:
[ 350]    036B: 26 C6 05 2D                           mov es:[di], '-'
[ 351]    036F: 83 C7 02                              add di, 2
[ 352]    0372: E2 F7                                 loop loopHorizontal
[ 353]        :                                       
[ 354]    0374: 5B                                    pop bx
[ 355]    0375: 07                                    pop es
[ 356]    0376: C3                                    ret
[ 357]        :                                       endp
[ 358]        :                                       
[ 359]        :                                       
[ 360]    0377:                                       drawField proc
[ 361]    0377: 50                                    push ax
[ 362]    0378: 53                                    push bx
[ 363]    0379: 51                                    push cx
[ 364]    037A: 52                                    push dx
[ 365]    037B: 56                                    push si
[ 366]    037C: 57                                    push di
[ 367]    037D: 06                                    push es
[ 368]        :                                       
[ 369]    037E: B8 00 B8                              mov ax, 0b800h
[ 370]    0381: 8E C0                                 mov es, ax
[ 371]    0383: BF 02 00                              mov di, vmPrintOffset
[ 372]    0386: BE 5D 06                              lea si, field
[ 373]        :                                       
[ 374]        :                                       
[ 375]    0389: B9 12 00                              mov cx, rows
[ 376]    038C:                                       coloumnLoopDraw:
[ 377]    038C: 51                                    push cx
[ 378]    038D: B9 0C 00                              mov cx, coloumns
[ 379]        :                                       
[ 380]    0390:                                       rowLoopDraw:
[ 381]    0390: 8A 04                                 mov al, [si]
[ 382]    0392: 3C 00                                 cmp al, 0
[ 383]    0394: 75 07                                 jne isOne
[ 384]    0396:                                       isZero:
[ 385]    0396: B0 20                                 mov al, ' '
[ 386]    0398: 26 88 05                              mov es:[di], al
[ 387]    039B: EB 07                                 jmp nextDraw
[ 388]    039D:                                       isOne:
[ 389]    039D: B0 2A                                 mov al, '*'
[ 390]    039F: 26 88 05                              mov es:[di], al
[ 391]    03A2: EB 00                                 jmp nextDraw
[ 392]        :                                       
[ 393]    03A4:                                       nextDraw:
[ 394]    03A4: 83 C7 02                              add di, 2
[ 395]    03A7: 46                                    inc si
[ 396]        :                                       
[ 397]    03A8: E2 E6                                 loop rowLoopDraw
[ 398]        :                                       
[ 399]    03AA: 59                                    pop cx
[ 400]    03AB: B8 0C 00                              mov ax, coloumns
[ 401]        :                                       
[ 402]    03AE: BB 02 00                              mov bx, 2
[ 403]    03B1: F7 E3                                 mul bx
[ 404]    03B3: 8B D8                                 mov bx, ax
[ 405]        :                                       ; computimg: coloumns*2 and moving to bx
[ 406]    03B5: B8 A0 00                              mov ax, 160
[ 407]    03B8: 2B C3                                 sub ax, bx
[ 408]        :                                       ;add ax, vmPrintOffset
[ 409]        :                                       ;computing: 160 - coloumns * 2 + vmPrintOffset
[ 410]        :                                       
[ 411]    03BA: 03 F8                                 add di, ax
[ 412]        :                                       
[ 413]    03BC: E2 CE                                 loop coloumnLoopDraw
[ 414]        :                                       
[ 415]    03BE: 07                                    pop es
[ 416]    03BF: 5F                                    pop di
[ 417]    03C0: 5E                                    pop si
[ 418]    03C1: 5A                                    pop dx
[ 419]    03C2: 59                                    pop cx
[ 420]    03C3: 5B                                    pop bx
[ 421]    03C4: 58                                    pop ax
[ 422]    03C5: C3                                    ret
[ 423]        :                                       endp
[ 424]        :                                       
[ 425]    03C6:                                       moveRight proc
[ 426]    03C6: 50                                    push ax
[ 427]    03C7: 53                                    push bx
[ 428]    03C8: 51                                    push cx
[ 429]    03C9: 52                                    push dx
[ 430]    03CA: 56                                    push si
[ 431]    03CB: 57                                    push di
[ 432]        :                                       
[ 433]    03CC: BE 36 07                              lea si, figure
[ 434]    03CF: 83 C6 02                              add si, 2
[ 435]    03D2: B9 03 00                              mov cx, 3
[ 436]    03D5:                                       checkRightLoop:
[ 437]    03D5: 8A 04                                 mov al, [si]
[ 438]    03D7: 3C 00                                 cmp al, 0
[ 439]    03D9: 75 22                                 jne noMoveRight
[ 440]    03DB: 83 C6 03                              add si, 3
[ 441]    03DE: E2 F5                                 loop checkRightLoop
[ 442]        :                                       
[ 443]    03E0: BF 36 07                              lea di, figure
[ 444]    03E3: B9 03 00                              mov cx, 3
[ 445]    03E6: BB 00 00                              mov bx, 0
[ 446]    03E9:                                       moveRightLoop:
[ 447]    03E9: 8A 41 01                              mov al, [di+bx+1]
[ 448]    03EC: 88 41 02                              mov [di+bx+2], al
[ 449]        :                                       
[ 450]    03EF: 8A 01                                 mov al, [di+bx]
[ 451]    03F1: 88 41 01                              mov [di+bx+1], al
[ 452]        :                                       
[ 453]    03F4: B0 00                                 mov al, 0
[ 454]    03F6: 88 01                                 mov [di+bx], al
[ 455]        :                                       
[ 456]    03F8: 83 C3 03                              add bx, 3
[ 457]    03FB: E2 EC                                 loop moveRightLoop
[ 458]        :                                       
[ 459]    03FD:                                       noMoveRight:
[ 460]    03FD: 5F                                    pop di
[ 461]    03FE: 5E                                    pop si
[ 462]    03FF: 5A                                    pop dx
[ 463]    0400: 59                                    pop cx
[ 464]    0401: 5B                                    pop bx
[ 465]    0402: 58                                    pop ax
[ 466]    0403: C3                                    ret
[ 467]        :                                       endp
[ 468]        :                                       
[ 469]    0404:                                       moveLeft proc
[ 470]    0404: 50                                    push ax
[ 471]    0405: 53                                    push bx
[ 472]    0406: 51                                    push cx
[ 473]    0407: 52                                    push dx
[ 474]    0408: 56                                    push si
[ 475]    0409: 57                                    push di
[ 476]        :                                       
[ 477]    040A: BE 36 07                              lea si, figure
[ 478]    040D: 83 C6 00                              add si, 0
[ 479]    0410: B9 03 00                              mov cx, 3
[ 480]    0413:                                       checkLeftLoop:
[ 481]    0413: 8A 04                                 mov al, [si]
[ 482]    0415: 3C 00                                 cmp al, 0
[ 483]    0417: 75 23                                 jne noMoveLeft
[ 484]    0419: 83 C6 03                              add si, 3
[ 485]    041C: E2 F5                                 loop checkLeftLoop
[ 486]        :                                       
[ 487]    041E: BF 36 07                              lea di, figure
[ 488]    0421: B9 03 00                              mov cx, 3
[ 489]    0424: BB 00 00                              mov bx, 0
[ 490]    0427:                                       moveLeftLoop:
[ 491]    0427: 8A 41 01                              mov al, [di+bx+1]
[ 492]    042A: 88 01                                 mov [di+bx], al
[ 493]        :                                       
[ 494]    042C: 8A 41 02                              mov al, [di+bx+2]
[ 495]    042F: 88 41 01                              mov [di+bx+1], al
[ 496]        :                                       
[ 497]    0432: B0 00                                 mov al, 0
[ 498]    0434: 88 41 02                              mov [di+bx+2], al
[ 499]        :                                       
[ 500]    0437: 83 C3 03                              add bx, 3
[ 501]    043A: E2 EB                                 loop moveLeftLoop
[ 502]        :                                       
[ 503]    043C:                                       noMoveLeft:
[ 504]    043C: 5F                                    pop di
[ 505]    043D: 5E                                    pop si
[ 506]    043E: 5A                                    pop dx
[ 507]    043F: 59                                    pop cx
[ 508]    0440: 5B                                    pop bx
[ 509]    0441: 58                                    pop ax
[ 510]    0442: C3                                    ret
[ 511]        :                                       endp
[ 512]        :                                       
[ 513]    0443:                                       moveDown proc
[ 514]    0443: 50                                    push ax
[ 515]    0444: 53                                    push bx
[ 516]    0445: 51                                    push cx
[ 517]    0446: 52                                    push dx
[ 518]    0447: 56                                    push si
[ 519]    0448: 57                                    push di
[ 520]        :                                       
[ 521]    0449: BE 36 07                              lea si, figure
[ 522]    044C: 83 C6 06                              add si, 6
[ 523]    044F: B9 03 00                              mov cx, 3
[ 524]    0452:                                       checkDownLoop:
[ 525]    0452: 8A 04                                 mov al, [si]
[ 526]    0454: 3C 00                                 cmp al, 0
[ 527]    0456: 75 20                                 jne noMoveDown
[ 528]    0458: 46                                    inc si
[ 529]    0459: E2 F7                                 loop checkDownLoop
[ 530]        :                                       
[ 531]    045B: BF 36 07                              lea di, figure
[ 532]    045E: B9 03 00                              mov cx, 3
[ 533]    0461: BB 00 00                              mov bx, 0
[ 534]    0464:                                       moveDownLoop:
[ 535]    0464: 8A 41 03                              mov al, [di+3+bx]
[ 536]    0467: 88 41 06                              mov [di+6+bx], al
[ 537]        :                                       
[ 538]    046A: 8A 01                                 mov al, [di+bx]
[ 539]    046C: 88 41 03                              mov [di+3+bx], al
[ 540]        :                                       
[ 541]    046F: B0 00                                 mov al, 0
[ 542]    0471: 88 01                                 mov [di+bx], al
[ 543]        :                                       
[ 544]    0473: 83 C3 01                              add bx, 1
[ 545]    0476: E2 EC                                 loop moveDownLoop
[ 546]        :                                       
[ 547]    0478:                                       noMoveDown:
[ 548]    0478: 5F                                    pop di
[ 549]    0479: 5E                                    pop si
[ 550]    047A: 5A                                    pop dx
[ 551]    047B: 59                                    pop cx
[ 552]    047C: 5B                                    pop bx
[ 553]    047D: 58                                    pop ax
[ 554]    047E: C3                                    ret
[ 555]        :                                       endp
[ 556]        :                                       
[ 557]        :                                       
[ 558]        :                                       
[ 559]        :                                       
[ 560]    047F:                                       tryPut proc
[ 561]        :                                       ; ax == 0 -- good , ax == 1 -- can not put
[ 562]    047F: 53                                    push bx
[ 563]    0480: 51                                    push cx
[ 564]    0481: 52                                    push dx
[ 565]    0482: 56                                    push si
[ 566]    0483: 57                                    push di
[ 567]        :                                       
[ 568]    0484: BE 36 07                              lea si, figure
[ 569]    0487: BF 5D 06                              lea di, field
[ 570]        :                                       
[ 571]    048A: A1 53 06                              mov ax, FigY
[ 572]    048D: BB 0C 00                              mov bx, coloumns
[ 573]    0490: F7 E3                                 mul bx
[ 574]    0492: 03 06 51 06                           add ax, FigX
[ 575]    0496: 03 F8                                 add di, ax
[ 576]        :                                       
[ 577]    0498: B9 03 00                              mov cx, 3
[ 578]    049B:                                       coloumnLoopTryPut:
[ 579]    049B: 51                                    push cx
[ 580]    049C: B9 03 00                              mov cx, 3
[ 581]        :                                       
[ 582]    049F:                                       rowLoopTryPut:
[ 583]    049F: 8A 04                                 mov al, [si]
[ 584]    04A1: 8A 25                                 mov ah, [di]
[ 585]    04A3: 3C 00                                 cmp al, 0
[ 586]    04A5: 74 06                                 je notOne
[ 587]        :                                       
[ 588]    04A7: 8A 05                                 mov al, [di]
[ 589]    04A9: 3C 01                                 cmp al, 1
[ 590]    04AB: 74 13                                 je cannotPut
[ 591]        :                                       
[ 592]    04AD:                                       notOne:
[ 593]    04AD: 47                                    inc di
[ 594]    04AE: 46                                    inc si
[ 595]        :                                       
[ 596]    04AF: E2 EE                                 loop rowLoopTryPut
[ 597]        :                                       
[ 598]    04B1: 59                                    pop cx
[ 599]    04B2: B8 0C 00                              mov ax, coloumns
[ 600]    04B5: 2D 03 00                              sub ax, 3
[ 601]    04B8: 03 F8                                 add di, ax
[ 602]        :                                       
[ 603]    04BA: E2 DF                                 loop coloumnLoopTryPut
[ 604]        :                                       
[ 605]    04BC: 33 C0                                 xor ax, ax
[ 606]        :                                       
[ 607]    04BE: EB 06                                 jmp endTryPut
[ 608]        :                                       
[ 609]    04C0:                                       cannotPut:
[ 610]    04C0: 59                                    pop cx
[ 611]    04C1: 33 C0                                 xor ax, ax
[ 612]    04C3: 05 01 00                              add ax, 1
[ 613]        :                                       
[ 614]    04C6:                                       endTryPut:
[ 615]    04C6: 5F                                    pop di
[ 616]    04C7: 5E                                    pop si
[ 617]    04C8: 5A                                    pop dx
[ 618]    04C9: 59                                    pop cx
[ 619]    04CA: 5B                                    pop bx
[ 620]    04CB: C3                                    ret
[ 621]        :                                       endp
[ 622]        :                                       
[ 623]        :                                       
[ 624]    04CC:                                       put proc
[ 625]    04CC: 50                                    push ax
[ 626]    04CD: 53                                    push bx
[ 627]    04CE: 51                                    push cx
[ 628]    04CF: 52                                    push dx
[ 629]    04D0: 56                                    push si
[ 630]    04D1: 57                                    push di
[ 631]        :                                       
[ 632]    04D2: BE 36 07                              lea si, figure
[ 633]    04D5: BF 5D 06                              lea di, field
[ 634]        :                                       
[ 635]    04D8: A1 53 06                              mov ax, FigY
[ 636]    04DB: BB 0C 00                              mov bx, coloumns
[ 637]    04DE: F7 E3                                 mul bx
[ 638]    04E0: 03 06 51 06                           add ax, FigX
[ 639]    04E4: 03 F8                                 add di, ax
[ 640]        :                                       
[ 641]    04E6: B9 03 00                              mov cx, 3
[ 642]    04E9:                                       coloumnLoopPut:
[ 643]    04E9: 51                                    push cx
[ 644]    04EA: B9 03 00                              mov cx, 3
[ 645]        :                                       
[ 646]    04ED:                                       rowLoopPut:
[ 647]    04ED: 8A 04                                 mov al, [si]
[ 648]    04EF: 3C 00                                 cmp al, 0
[ 649]    04F1: 74 02                                 je continuePut
[ 650]    04F3: 88 05                                 mov [di], al
[ 651]        :                                       
[ 652]    04F5:                                       continuePut:
[ 653]    04F5: 47                                    inc di
[ 654]    04F6: 46                                    inc si
[ 655]        :                                       
[ 656]    04F7: E2 F4                                 loop rowLoopPut
[ 657]        :                                       
[ 658]    04F9: 59                                    pop cx
[ 659]    04FA: B8 0C 00                              mov ax, coloumns
[ 660]    04FD: 2D 03 00                              sub ax, 3
[ 661]    0500: 03 F8                                 add di, ax
[ 662]        :                                       
[ 663]    0502: E2 E5                                 loop coloumnLoopPut
[ 664]        :                                       
[ 665]    0504: 5F                                    pop di
[ 666]    0505: 5E                                    pop si
[ 667]    0506: 5A                                    pop dx
[ 668]    0507: 59                                    pop cx
[ 669]    0508: 5B                                    pop bx
[ 670]    0509: 58                                    pop ax
[ 671]    050A: C3                                    ret
[ 672]        :                                       endp
[ 673]        :                                       
[ 674]    050B:                                       clearCurrFig proc
[ 675]    050B: 50                                    push ax
[ 676]    050C: 53                                    push bx
[ 677]    050D: 51                                    push cx
[ 678]    050E: 52                                    push dx
[ 679]    050F: 56                                    push si
[ 680]    0510: 57                                    push di
[ 681]        :                                       
[ 682]    0511: BE 36 07                              lea si, figure
[ 683]    0514: BF 5D 06                              lea di, field
[ 684]        :                                       
[ 685]    0517: A1 53 06                              mov ax, FigY
[ 686]    051A: BB 0C 00                              mov bx, coloumns
[ 687]    051D: F7 E3                                 mul bx
[ 688]    051F: 03 06 51 06                           add ax, FigX
[ 689]    0523: 03 F8                                 add di, ax
[ 690]        :                                       
[ 691]    0525: B9 03 00                              mov cx, 3
[ 692]    0528:                                       coloumnLoopClear:
[ 693]    0528: 51                                    push cx
[ 694]    0529: B9 03 00                              mov cx, 3
[ 695]        :                                       
[ 696]    052C:                                       rowLoopClear:
[ 697]    052C: 8A 04                                 mov al, [si]
[ 698]    052E: 3C 00                                 cmp al, 0
[ 699]    0530: 74 03                                 je continueClear
[ 700]    0532: C6 05 00                              mov [di], 0
[ 701]        :                                       
[ 702]    0535:                                       continueClear:
[ 703]    0535: 47                                    inc di
[ 704]    0536: 46                                    inc si
[ 705]        :                                       
[ 706]    0537: E2 F3                                 loop rowLoopClear
[ 707]        :                                       
[ 708]    0539: 59                                    pop cx
[ 709]    053A: B8 0C 00                              mov ax, coloumns
[ 710]    053D: 2D 03 00                              sub ax, 3
[ 711]    0540: 03 F8                                 add di, ax
[ 712]        :                                       
[ 713]    0542: E2 E4                                 loop ColoumnLoopClear
[ 714]        :                                       
[ 715]    0544: 5F                                    pop di
[ 716]    0545: 5E                                    pop si
[ 717]    0546: 5A                                    pop dx
[ 718]    0547: 59                                    pop cx
[ 719]    0548: 5B                                    pop bx
[ 720]    0549: 58                                    pop ax
[ 721]    054A: C3                                    ret
[ 722]        :                                       endp
[ 723]        :                                       
[ 724]    054B:                                       rotateFig proc
[ 725]    054B: 51                                    push cx
[ 726]        :                                       
[ 727]    054C: BE 36 07                              lea     si, figure
[ 728]    054F: BF 48 07                              lea     di, temp
[ 729]    0552: B9 09 00                              mov     cx, 9
[ 730]    0555: BB 06 00                              mov     bx, 6
[ 731]        :                                       ;rows * coloumns - rows
[ 732]    0558:                                       Rot:
[ 733]    0558: 56                                    push    si
[ 734]    0559: 03 F3                                 add     si, bx
[ 735]    055B: 83 EB 03                              sub     bx,3
[ 736]    055E: 83 FB 00                              cmp     bx,0
[ 737]    0561: 7D 03                                 jge     Pos
[ 738]    0563: 83 C3 0A                              add     bx, 10
[ 739]        :                                       ;rows * coloumns + 1 == 3 * 3 + 1
[ 740]    0566:                                       Pos:
[ 741]        :                                       
[ 742]    0566: 8A 04                                 mov     al,[si]
[ 743]    0568: 88 05                                 mov     [di],al
[ 744]    056A: 47                                    inc     di
[ 745]    056B: 5E                                    pop     si
[ 746]    056C: E2 EA                                 loop    Rot
[ 747]        :                                       
[ 748]    056E: BE 48 07                              lea si, temp
[ 749]    0571: BF 36 07                              lea di, figure
[ 750]        :                                       
[ 751]    0574: B9 09 00                              mov cx, 9
[ 752]        :                                       
[ 753]    0577: E8 BD FD                              call copy
[ 754]        :                                       
[ 755]    057A: 59                                    pop cx
[ 756]    057B: C3                                    ret
[ 757]        :                                       endp
[ 758]        :                                       
[ 759]    057C:                                       checkLines proc
[ 760]        :                                       ; bx -- curr row number
[ 761]    057C: 50                                    push ax
[ 762]    057D: 53                                    push bx
[ 763]    057E: 51                                    push cx
[ 764]    057F: 52                                    push dx
[ 765]    0580: 56                                    push si
[ 766]    0581: 57                                    push di
[ 767]        :                                       
[ 768]    0582: BF 5D 06                              lea di, field
[ 769]    0585: BB 00 00                              mov bx, 0
[ 770]        :                                       
[ 771]    0588:                                       rowLoopCheck:
[ 772]    0588: B9 0C 00                              mov cx, coloumns
[ 773]    058B:                                       coloumnLoopCheck:
[ 774]    058B: 8A 05                                 mov al, [di]
[ 775]    058D: 3C 00                                 cmp al, 0
[ 776]    058F: 74 32                                 je nextRow
[ 777]    0591: 47                                    inc di
[ 778]    0592: E2 F7                                 loop coloumnLoopCheck
[ 779]    0594: 4F                                    dec di
[ 780]    0595:                                       moveAll:
[ 781]    0595: 57                                    push di
[ 782]        :                                       
[ 783]    0596: B0 01                                 mov al, 1
[ 784]    0598: A2 50 06                              mov beepFlag, al
[ 785]        :                                       
[ 786]    059B: 83 FB 00                              cmp bx, 0
[ 787]    059E: 74 16                                 je  clearFirstRow
[ 788]        :                                       
[ 789]    05A0: B8 0C 00                              mov ax, coloumns
[ 790]    05A3: F7 E3                                 mul bx
[ 791]    05A5: 2D 01 00                              sub ax, 1
[ 792]    05A8: BE 5D 06                              lea si, field
[ 793]    05AB: 03 F0                                 add si, ax
[ 794]        :                                       
[ 795]    05AD: 51                                    push cx
[ 796]    05AE: 8B C8                                 mov cx, ax
[ 797]        :                                       ;because ax -- is index of the element
[ 798]        :                                       ;and cx -- is current amount of them
[ 799]    05B0: 83 C1 01                              add cx, 1
[ 800]        :                                       
[ 801]    05B3: FD                                    std
[ 802]        :                                       
[ 803]    05B4: F3 A4                                 rep movsb
[ 804]        :                                       
[ 805]    05B6:                                       clearFirstRow:
[ 806]    05B6: BF 5D 06                              lea di, field
[ 807]    05B9: B9 0C 00                              mov cx, coloumns
[ 808]    05BC: B0 00                                 mov al, 0
[ 809]        :                                       
[ 810]    05BE: FC                                    cld
[ 811]        :                                       
[ 812]    05BF: F3 AA                                 rep stosb
[ 813]        :                                       
[ 814]    05C1: 59                                    pop cx
[ 815]    05C2: 5F                                    pop di
[ 816]    05C3:                                       nextRow:
[ 817]    05C3: 83 C3 01                              add bx, 1
[ 818]    05C6: 83 FB 12                              cmp bx, rows
[ 819]    05C9: 74 0E                                 je beepCheck
[ 820]        :                                       
[ 821]    05CB: 8B C3                                 mov ax, bx
[ 822]    05CD: B9 0C 00                              mov cx, coloumns
[ 823]    05D0: F7 E1                                 mul cx
[ 824]    05D2: BF 5D 06                              lea di, field
[ 825]    05D5: 03 F8                                 add di, ax
[ 826]        :                                       
[ 827]    05D7: EB AF                                 jmp rowLoopCheck
[ 828]        :                                       
[ 829]    05D9:                                       beepCheck:
[ 830]    05D9: A0 50 06                              mov al, beepFlag
[ 831]    05DC: 3C 00                                 cmp al, 0
[ 832]    05DE: 74 08                                 je exitCheck
[ 833]        :                                       
[ 834]    05E0: E8 0C 00                              call beep
[ 835]    05E3: 33 C0                                 xor ax, ax
[ 836]    05E5: A2 50 06                              mov beepFlag, al
[ 837]        :                                       
[ 838]    05E8:                                       exitCheck:
[ 839]    05E8: 5F                                    pop di
[ 840]    05E9: 5E                                    pop si
[ 841]    05EA: 5A                                    pop dx
[ 842]    05EB: 59                                    pop cx
[ 843]    05EC: 5B                                    pop bx
[ 844]    05ED: 58                                    pop ax
[ 845]    05EE: C3                                    ret
[ 846]        :                                       endp
[ 847]        :                                       
[ 848]    05EF:                                       beep    proc
[ 849]    05EF: 60                                    pusha
[ 850]        :                                       
[ 851]        :                                       ;sound on
[ 852]    05F0: B9 06 00                              mov  cx,6
[ 853]    05F3: E4 61                                 next:   in   al,61h
[ 854]    05F5: 0C 03                                 or   al,3
[ 855]    05F7: E6 61                                 out  61h,al
[ 856]    05F9: B0 B6                                 mov  al,10110110b
[ 857]    05FB: BA 43 00                              mov  dx,43h
[ 858]    05FE: EE                                    out  dx,al
[ 859]    05FF: 4A                                    dec  dx
[ 860]    0600: 8A C1                                 mov  al,cl
[ 861]    0602: EE                                    out  dx,al
[ 862]    0603: EE                                    out  dx,al
[ 863]    0604: B8 01 00                              mov  ax,1
[ 864]    0607: E8 0A 00                              call delaySound
[ 865]        :                                       ;sound off
[ 866]    060A: E4 61                                 in   al,61h
[ 867]    060C: 24 FC                                 and  al,11111100b
[ 868]    060E: E6 61                                 out  61h,al
[ 869]    0610: E2 E1                                 loop next
[ 870]        :                                       
[ 871]    0612: 61                                    popa
[ 872]    0613: C3                                    ret
[ 873]        :                                       endp
[ 874]        :                                       
[ 875]        :                                       
[ 876]    0614:                                       delaySound   proc
[ 877]    0614: 8B D8                                 mov  bx,ax
[ 878]    0616: E8 D4 FC                              call getTime
[ 879]    0619: 03 D8                                 add  bx,ax
[ 880]    061B: E8 CF FC                              tester: call getTime
[ 881]    061E: 3B C3                                 cmp  ax,bx
[ 882]    0620: 7C F9                                 jl   tester
[ 883]    0622: C3                                    ret
[ 884]        :                                       endp
[ 885]        :                                       
[ 886]    0623:                                       TetrisFigures:
[ 887]    0623: 00 00 00                              db 0,0,0
[ 888]    0626: 01 01 01                              db 1,1,1
[ 889]    0629: 00 01 00                              db 0,1,0
[ 890]        :                                       ;--------
[ 891]    062C: 00 00 00                              db 0,0,0
[ 892]    062F: 01 01 01                              db 1,1,1
[ 893]    0632: 00 00 01                              db 0,0,1
[ 894]        :                                       ;--------
[ 895]    0635: 00 00 00                              db 0,0,0
[ 896]    0638: 01 01 00                              db 1,1,0
[ 897]    063B: 01 01 00                              db 1,1,0
[ 898]        :                                       ;--------
[ 899]    063E: 00 00 00                              db 0,0,0
[ 900]    0641: 01 01 00                              db 1,1,0
[ 901]    0644: 00 01 01                              db 0,1,1
[ 902]        :                                       ;--------
[ 903]    0647: 00 01 00                              db 0,1,0
[ 904]    064A: 00 01 00                              db 0,1,0
[ 905]    064D: 00 01 00                              db 0,1,0
[ 906]        :                                       
[ 907]        :                                       fieldSize equ 216
[ 908]        :                                       rows equ 18
[ 909]        :                                       coloumns equ 12
[ 910]        :                                       ;rows equ 6
[ 911]        :                                       ;coloumns equ 6
[ 912]        :                                       vmPrintOffset equ 2
[ 913]        :                                       
[ 914]    0650: 00                                    beepFlag db 0
[ 915]        :                                       
[ 916]    0651: 00 00                                 FigX  dw 0
[ 917]    0653: 00 00                                 FigY  dw 0
[ 918]        :                                       
[ 919]    0655: 00 00                                 figNumber dw 0
[ 920]        :                                       
[ 921]    0657: 14 00                                 delayValue  dw 20
[ 922]    0659: 00 00                                 timer   dw 0
[ 923]    065B: 00 00                                 randNumer dw 0
[ 924]        :                                       
[ 925]    065D: 00 00 00 00 00 00 00 00 00 00 00 00   field   db fieldSize dup (0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                                                    
[ 926]    0735: 00                                    randValue db 0
[ 927]        :                                       
[ 928]    0736: 00 00 00 00 00 00 00 00 00            figure  db 9 dup(0)
[ 929]    073F: 00 00 00 00 00 00 00 00 00            oldFigure  db 9 dup(0)
[ 930]        :                                       
[ 931]    0748: 00 00 00 00 00 00 00 00 00            temp    db 9 dup(0)
[ 932]        :                                       ends
[ 933]        :                                       end start
[ 934]        :                                       
 
===================================================================================================
 




===================================================================================================
