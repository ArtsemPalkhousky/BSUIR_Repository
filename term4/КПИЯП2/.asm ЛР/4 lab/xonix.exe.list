EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
xonix.exe -- emu8086 assembler version: 4.05  
 
[ 17.06.2021  --  17:19:23 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       .stack 256h
[   3]        :                                       
[   4]        :                                       .data
[   5]        :                                       ;Colors
[   6]        :                                       land_color equ 01100000b
[   7]        :                                       player_color equ 01101010b
[   8]        :                                       player_color_nl equ 11111011b ;green on pink
[   9]        :                                       enemy_color equ 00001100b     ;red
[  10]        :                                       path_color equ 11000000b
[  11]        :                                       score_color equ 00001000b
[  12]        :                                       blackSymbol equ 00000111b
[  13]    0260: 47 0C 61 0C 6D 0C 65 0C 20 0C 4F 0C   game_over           dw      0C47h, 0C61h, 0C6Dh, 0C65h, 0C20h, 0C4Fh, 0C76h, 0C65h, 0C72h
                76 0C 65 0C 72 0C                   
[  14]    0272: 59 0A 6F 0A 75 0A 60 0A 76 0A 20 0A   game_win            dw      0A59h, 0A6Fh, 0A75h, 0A60h, 0A76h ,0A20h, 0A57h, 0A4Fh, 0A4Eh
                57 0A 4F 0A 4E 0A                   
[  15]    0284: 50 0F 72 0F 65 0F 73 0F 73 0F 20 0C   e_message           dw      0F50h, 0F72h, 0F65h, 0F73h, 0F73h, 0C20h,0F27h, 0F61h, 0F6Eh, 0F79h, 0F27h, 0C20h, 0F74h, 0F6Fh, 0C20h, 0F65h, 0F78h, 0F69h, 0F74h
                27 0F 61 0F 6E 0F 79 0F 27 0F 20 0C 
                74 0F 6F 0F 20 0C 65 0F 78 0F 69 0F 
                74 0F                               
[  16]    02AA: 5C 08                                 e_offset            dw      085Ch
[  17]        :                                       
[  18]        :                                       
[  19]        :                                       upKey		=	48h	
[  20]        :                                       downKey		=	50h		
[  21]        :                                       leftKey		=	4Bh		
[  22]        :                                       rightKey	=	4Dh		
[  23]        :                                       esc = 01h
[  24]        :                                       
[  25]        :                                       
[  26]    02AC: 50 00                                 	x	dw	80		
[  27]    02AE: 0C                                    	y	db	12		
[  28]    02AF: 02                                    	d_x	db	2		
[  29]    02B0: 01                                    	d_y	db	1
[  30]        :                                       	
[  31]    02B1: 50 00                                 	x2	dw	80		
[  32]    02B3: 0C                                    	y2	db	12		
[  33]    02B4: FE                                    	d_x2	db	-2		
[  34]    02B5: FF                                    	d_y2	db	-1	
[  35]        :                                       	
[  36]    02B6: 17                                    	end_y db 23
[  37]    02B7: 9C 00                                 	end_x dw 156	
[  38]        :                                       	
[  39]    02B9: 00 00                                 	pts dw 0
[  40]        :                                       	
[  41]        :                                       
[  42]        :                                       granica_len equ 160
[  43]        :                                       
[  44]        :                                       .code
[  45]        :                                       ;Left ,right ,Top, Bottom
[  46]    02C0:                                       drawRight proc
[  47]    02C0: 52                                    push dx
[  48]    02C1:                                       UpMove:
[  49]    02C1: 83 C2 02                              add dx, 2
[  50]    02C4: E8 4E 01                              call GetSymbol
[  51]    02C7: 80 FC 60                              cmp ah, land_color
[  52]    02CA: 74 09                                 je DrawRightEnd
[  53]    02CC: B4 C0                                 mov ah, path_color
[  54]    02CE: B0 20                                 mov al, ' '
[  55]    02D0: E8 49 01                              call SetSymbol
[  56]    02D3: EB EC                                 jmp UpMove
[  57]    02D5:                                       DrawRightEnd:
[  58]    02D5: 5A                                    pop dx
[  59]    02D6: C3                                    ret
[  60]        :                                       drawRight endp
[  61]        :                                       
[  62]    02D7:                                       fillBlack proc
[  63]    02D7: 53                                    push bx
[  64]    02D8: 52                                    push dx
[  65]        :                                       ;start
[  66]    02D9: B3 01                                 mov bl, 1
[  67]    02DB:                                       verticalLoop:
[  68]    02DB: FE C3                                 inc bl
[  69]    02DD: 3A 1E 56 00                           cmp bl, end_y
[  70]    02E1: 74 21                                 je  fillBlackEnd
[  71]    02E3: BA 02 00                              mov dx,2
[  72]    02E6:                                       horizontLoop:
[  73]    02E6: 83 C2 02                              add dx, 2
[  74]    02E9: 3B 16 57 00                           cmp dx, end_x
[  75]    02ED: 74 EC                                 je verticalLoop
[  76]    02EF: E8 23 01                              call getSymbol
[  77]    02F2: 80 FC 07                              cmp  ah, blackSymbol
[  78]    02F5: 75 EF                                 jne horizontLoop
[  79]    02F7: B4 60                                 mov ah, land_color
[  80]    02F9: B0 20                                 mov al, ' '
[  81]    02FB: E8 1E 01                              call setSymbol
[  82]    02FE: FF 06 59 00                           inc pts
[  83]    0302: EB E2                                 jmp horizontLoop
[  84]    0304:                                       fillBlackEnd:
[  85]    0304: 5A                                    pop dx
[  86]    0305: 5B                                    pop bx
[  87]    0306: C3                                    ret
[  88]        :                                       fillBlack endp
[  89]        :                                       
[  90]    0307:                                       removeFilter proc
[  91]    0307: 53                                    push bx
[  92]    0308: 52                                    push dx
[  93]        :                                       ;start
[  94]    0309: B3 01                                 mov bl, 1
[  95]    030B:                                       verticalLoopFilter:
[  96]    030B: FE C3                                 inc bl
[  97]    030D: 3A 1E 56 00                           cmp bl, end_y
[  98]    0311: 74 1D                                 je  removeFilterEnd
[  99]    0313: BA 02 00                              mov dx,2
[ 100]    0316:                                       horizontLoopFilter:
[ 101]    0316: 83 C2 02                              add dx, 2
[ 102]    0319: 3B 16 57 00                           cmp dx, end_x
[ 103]    031D: 74 EC                                 je verticalLoopFilter
[ 104]    031F: E8 F3 00                              call getSymbol
[ 105]    0322: 80 FC C0                              cmp  ah, path_color
[ 106]    0325: 75 EF                                 jne horizontLoopFilter
[ 107]    0327: B4 07                                 mov ah, blackSymbol
[ 108]    0329: B0 20                                 mov al, ' '
[ 109]    032B: E8 EE 00                              call setSymbol
[ 110]    032E: EB E6                                 jmp horizontLoopFilter
[ 111]    0330:                                       removeFilterEnd:
[ 112]    0330: 5A                                    pop dx
[ 113]    0331: 5B                                    pop bx
[ 114]    0332: C3                                    ret
[ 115]        :                                       removeFilter endp
[ 116]        :                                       
[ 117]        :                                       
[ 118]    0333:                                       drawRight4 proc
[ 119]    0333: 52                                    push dx
[ 120]    0334:                                       RightMove4:
[ 121]    0334: 83 C2 02                              add dx,2
[ 122]    0337: E8 DB 00                              call GetSymbol
[ 123]    033A: 80 FC C0                              cmp ah, path_color
[ 124]    033D: 74 F5                                 je RightMove4
[ 125]    033F: 80 FC 60                              cmp ah, land_color
[ 126]    0342: 74 0D                                 je drawRight4End
[ 127]    0344: B4 C0                                 mov ah, path_color
[ 128]    0346: B0 20                                 mov al, ' '
[ 129]    0348: E8 D1 00                              call SetSymbol
[ 130]    034B: E8 27 00                              call DrawTop4
[ 131]    034E: E8 45 00                              call DrawBottom4
[ 132]    0351:                                       drawRight4End:
[ 133]    0351: 5A                                    pop dx
[ 134]    0352: C3                                    ret
[ 135]        :                                       drawRight4 endp
[ 136]        :                                       
[ 137]        :                                       
[ 138]    0353:                                       drawLeft4 proc
[ 139]    0353: 52                                    push dx
[ 140]    0354:                                       LeftMove4:
[ 141]    0354: 83 EA 02                              sub dx, 2
[ 142]    0357: E8 BB 00                              call GetSymbol
[ 143]    035A: 80 FC C0                              cmp ah, path_color
[ 144]    035D: 74 F5                                 je LeftMove4
[ 145]    035F: 80 FC 60                              cmp ah, land_color
[ 146]    0362: 74 0F                                 je DrawLeft4End
[ 147]    0364: B4 C0                                 mov ah, path_color
[ 148]    0366: B0 20                                 mov al, ' '
[ 149]    0368: E8 B1 00                              call SetSymbol
[ 150]    036B: E8 07 00                              call DrawTop4
[ 151]    036E: E8 25 00                              call DrawBottom4
[ 152]    0371: EB E1                                 jmp LeftMove4
[ 153]    0373:                                       DrawLeft4End:
[ 154]    0373: 5A                                    pop dx
[ 155]    0374: C3                                    ret
[ 156]        :                                       drawLeft4 endp ;end
[ 157]        :                                       
[ 158]    0375:                                       drawTop4 proc
[ 159]    0375: 53                                    push bx
[ 160]    0376:                                       TopMove4:
[ 161]    0376: FE CB                                 dec bl
[ 162]    0378: E8 9A 00                              call GetSymbol
[ 163]    037B: 80 FC C0                              cmp ah, path_color
[ 164]    037E: 74 F6                                 je TopMove4
[ 165]    0380: 80 FC 60                              cmp ah, land_color
[ 166]    0383: 74 0F                                 je DrawTop4End
[ 167]    0385: B4 C0                                 mov ah, path_color
[ 168]    0387: B0 20                                 mov al, ' '
[ 169]    0389: E8 90 00                              call SetSymbol
[ 170]    038C: E8 C4 FF                              call drawLeft4
[ 171]    038F: E8 A1 FF                              call drawRight4
[ 172]    0392: EB E2                                 jmp TopMove4
[ 173]    0394:                                       DrawTop4End:
[ 174]    0394: 5B                                    pop bx
[ 175]    0395: C3                                    ret
[ 176]        :                                       drawTop4 endp
[ 177]        :                                       
[ 178]    0396:                                       drawBottom4 proc
[ 179]    0396: 53                                    push bx
[ 180]    0397:                                       BottomMove4:
[ 181]    0397: FE C3                                 inc bl
[ 182]    0399: E8 79 00                              call GetSymbol
[ 183]    039C: 80 FC C0                              cmp ah, path_color
[ 184]    039F: 74 F6                                 je BottomMove4
[ 185]    03A1: 80 FC 60                              cmp ah, land_color
[ 186]    03A4: 74 0F                                 je DrawBottom4End
[ 187]    03A6: B4 C0                                 mov ah, path_color
[ 188]    03A8: B0 20                                 mov al, ' '
[ 189]    03AA: E8 6F 00                              call SetSymbol
[ 190]    03AD: E8 A3 FF                              call drawLeft4
[ 191]    03B0: E8 80 FF                              call drawRight4
[ 192]    03B3: EB E2                                 jmp BottomMove4
[ 193]    03B5:                                       DrawBottom4End:
[ 194]    03B5: 5B                                    pop bx
[ 195]    03B6: C3                                    ret
[ 196]        :                                       drawBottom4 endp
[ 197]        :                                       
[ 198]        :                                       
[ 199]    03B7:                                       fillPath	proc
[ 200]    03B7: 53                                    push bx
[ 201]    03B8: 51                                    push cx
[ 202]    03B9: 57                                    push di
[ 203]    03BA: BF 46 01                              mov di, 326
[ 204]    03BD: B9 48 0D                              mov cx, 3400
[ 205]    03C0: B0 C0                                 mov al, path_color
[ 206]    03C2: B4 60                                 mov ah, land_color
[ 207]    03C4: 33 DB                                 xor bx, bx
[ 208]    03C6:                                       nextSymbol:
[ 209]    03C6: F2 AE                                 repne scasb       ;poka ne naidet path_color
[ 210]    03C8: 75 0E                                 jne  exitPathFiller  ;esli cx=0 to v ccexit
[ 211]    03CA: 83 EF 02                              sub di, 2
[ 212]    03CD: B0 20                                 mov al, ' '
[ 213]    03CF: AB                                    stosw
[ 214]    03D0: B0 C0                                 mov al, path_color
[ 215]    03D2: 83 EF 02                              sub di, 2
[ 216]    03D5: 45                                    inc bp
[ 217]    03D6: EB EE                                 jmp nextSymbol
[ 218]    03D8:                                       exitPathFiller:
[ 219]    03D8: 5F                                    	pop di
[ 220]    03D9: 59                                    	pop cx
[ 221]    03DA: 5B                                    	pop bx
[ 222]    03DB: C3                                    		ret
[ 223]        :                                       fillPath	endp
[ 224]        :                                       
[ 225]    03DC:                                       fillBlack2	proc
[ 226]    03DC: 53                                    push bx
[ 227]    03DD: 51                                    push cx
[ 228]    03DE: 57                                    push di
[ 229]    03DF: BF 46 01                              mov di, 326
[ 230]    03E2: B9 48 0D                              mov cx, 3400
[ 231]    03E5: B0 07                                 mov al, blackSymbol
[ 232]    03E7: B4 60                                 mov ah, land_color
[ 233]    03E9: 33 DB                                 xor bx, bx
[ 234]    03EB:                                       nextSymbol2:
[ 235]    03EB: F2 AE                                 repne scasb       ;poka ne naidet path_color
[ 236]    03ED: 75 0E                                 jne  exitPathFiller2  ;esli cx=0 to v ccexit
[ 237]    03EF: 83 EF 02                              sub di, 2
[ 238]    03F2: B0 20                                 mov al, ' '
[ 239]    03F4: AB                                    stosw
[ 240]    03F5: B0 07                                 mov al, blackSymbol
[ 241]    03F7: 83 EF 02                              sub di, 2
[ 242]    03FA: 45                                    inc bp
[ 243]    03FB: EB EE                                 jmp nextSymbol2
[ 244]    03FD:                                       exitPathFiller2:
[ 245]    03FD: 5F                                    	pop di
[ 246]    03FE: 59                                    	pop cx
[ 247]    03FF: 5B                                    	pop bx
[ 248]    0400: C3                                    		ret
[ 249]        :                                       fillBlack2	endp
[ 250]        :                                       
[ 251]        :                                       
[ 252]        :                                       
[ 253]    0401:                                       fillArea  proc
[ 254]    0401: B4 C0                                 mov ah, path_color
[ 255]    0403: B0 20                                 mov al, ' '
[ 256]    0405: E8 14 00                              call SetSymbol
[ 257]    0408: E8 28 FF                              call drawRight4
[ 258]    040B: E8 45 FF                              call drawLeft4
[ 259]    040E: E8 64 FF                              call drawTop4
[ 260]    0411: E8 82 FF                              call drawBottom4
[ 261]    0414:                                       fillAreaEnd:
[ 262]    0414: C3                                    ret
[ 263]        :                                       fillArea endp
[ 264]        :                                       
[ 265]        :                                       
[ 266]    0415:                                       GetSymbol proc
[ 267]    0415: E8 09 00                              		call SymbolCords	
[ 268]    0418: 26 8B 05                              		mov	ax, es:[di]	;
[ 269]    041B: C3                                    		ret
[ 270]        :                                       GetSymbol endp
[ 271]        :                                       
[ 272]        :                                       
[ 273]    041C:                                       SetSymbol proc
[ 274]    041C: E8 02 00                              		call SymbolCords	
[ 275]    041F: AB                                    		stosw			
[ 276]    0420: C3                                    		ret
[ 277]        :                                       SetSymbol endp
[ 278]        :                                       
[ 279]        :                                       
[ 280]    0421:                                       SymbolCords	proc
[ 281]    0421: 53                                    		push bx
[ 282]    0422: 51                                    		push cx
[ 283]    0423: 32 FF                                 		xor	bh,bh
[ 284]    0425: 33 C9                                 		xor cx, cx
[ 285]    0427: 8B CB                                 		mov cx, bx
[ 286]    0429: 33 DB                                 		xor bx, bx
[ 287]    042B:                                       PixelSum:
[ 288]    042B: 81 C3 A0 00                           		add bx, 160
[ 289]    042F: E2 FA                                 		loop PixelSum
[ 290]    0431: 8B FB                                 		mov di, bx
[ 291]    0433: 03 FA                                 		add	di, dx
[ 292]    0435: 59                                    		pop cx
[ 293]    0436: 5B                                    		pop	bx
[ 294]    0437: C3                                    		ret
[ 295]        :                                       SymbolCords	endp
[ 296]        :                                       
[ 297]    0438:                                       ShowScore	proc
[ 298]    0438: 50                                    push ax
[ 299]    0439: 53                                    push bx
[ 300]    043A: 51                                    push cx
[ 301]    043B: 52                                    push dx
[ 302]    043C: A1 59 00                              		mov	ax,[pts]
[ 303]    043F: 03 C5                                 		add	ax,bp
[ 304]    0441: 33 C9                                 		xor cx, cx
[ 305]    0443: B1 00                                 		mov	cl,0
[ 306]    0445: BB 0A 00                              		mov	bx,10		
[ 307]    0448:                                       nextdigit:
[ 308]    0448: 33 D2                                 		xor dx, dx			
[ 309]    044A: F7 F3                                 		div	bx		
[ 310]    044C: 52                                    		push dx		
[ 311]    044D: 41                                    		inc	cx		
[ 312]    044E: 0B C0                                 		or	ax,ax
[ 313]    0450: 75 F6                                 		jnz	short nextdigit	
[ 314]        :                                       
[ 315]    0452: B4 0E                                 		mov ah, 0Eh
[ 316]    0454: B0 0D                                 		mov al, 0Dh		
[ 317]    0456: CD 10                                 		int 10h
[ 318]    0458: B3 08                                 		mov	bl, score_color
[ 319]    045A:                                       outdigit:
[ 320]    045A: 58                                    	pop	ax		
[ 321]    045B: B4 0E                                 	mov	ah,0Eh
[ 322]    045D: 04 30                                 	add	al,'0'	
[ 323]    045F: CD 10                                 	int	10h		
[ 324]    0461: E2 F7                                 	loop outdigit	
[ 325]    0463: 5A                                    pop dx
[ 326]    0464: 59                                    pop cx
[ 327]    0465: 5B                                    pop bx
[ 328]    0466: 58                                    pop ax
[ 329]    0467: C3                                    ret
[ 330]        :                                       ShowScore endp
[ 331]        :                                       
[ 332]    0468:                                       Pause proc
[ 333]    0468: 52                                    push dx
[ 334]    0469: 50                                    push ax
[ 335]    046A: 51                                    push cx
[ 336]    046B: B9 00 00                              mov cx, 0
[ 337]    046E: BA E8 FD                              mov dx, 65000
[ 338]    0471: B4 86                                 mov ah, 86h
[ 339]    0473: CD 15                                 int 15h
[ 340]    0475: 59                                    pop cx
[ 341]    0476: 58                                    pop ax
[ 342]    0477: 5A                                    pop dx
[ 343]    0478: C3                                    ret
[ 344]        :                                       Pause endp
[ 345]        :                                       
[ 346]    0479:                                       getKey proc
[ 347]    0479:                                       	next:
[ 348]    0479: B4 01                                 		mov	ah, 01h
[ 349]    047B: CD 16                                 		int	16h		
[ 350]    047D: 74 06                                 		jz	short nokeys	
[ 351]    047F: 32 E4                                 		xor	ah,ah
[ 352]    0481: CD 16                                 		int	16h		
[ 353]    0483: 8A EC                                 		mov ch, ah 	
[ 354]    0485:                                       	nokeys:
[ 355]    0485: C3                                    		ret
[ 356]        :                                       getKey endp
[ 357]        :                                       
[ 358]        :                                       
[ 359]        :                                       
[ 360]    0486:                                       start:
[ 361]    0486: B8 26 00                              mov ax, @data
[ 362]    0489: 8E D8                                 mov ds, ax
[ 363]    048B: 8E C0                                 mov es, ax
[ 364]        :                                       
[ 365]    048D: B4 00                                 mov ah, 00   ;16 bit video mode
[ 366]    048F: B0 03                                 mov al, 03
[ 367]    0491: CD 10                                 int 10h
[ 368]        :                                       
[ 369]        :                                       ;paint borders
[ 370]    0493: 68 00 B8                              push 0B800h
[ 371]    0496: 07                                    pop es
[ 372]    0497: B0 20                                 mov al, ' '
[ 373]    0499: B4 60                                 mov ah, land_color
[ 374]        :                                       
[ 375]    049B: B9 50 00                              mov cx, granica_len/2          ;up
[ 376]    049E: 83 E9 02                              sub cx, 2
[ 377]    04A1: BF A2 00                              mov di, granica_len+2
[ 378]    04A4: FC                                    cld
[ 379]    04A5: F3 AB                                 rep stosw
[ 380]        :                                       
[ 381]    04A7: B9 50 00                              mov cx, granica_len/2          ;down
[ 382]    04AA: 83 E9 02                              sub cx, 2
[ 383]    04AD: BF 60 0E                              mov di, granica_len*23
[ 384]    04B0: 83 C7 02                              add di, 2
[ 385]    04B3: FC                                    cld
[ 386]    04B4: F3 AB                                 rep stosw
[ 387]        :                                       
[ 388]    04B6: BB 00 00                              mov bx, 0
[ 389]    04B9:                                       left:
[ 390]    04B9: 43                                    inc bx
[ 391]    04BA: 8B CB                                 mov cx, bx
[ 392]    04BC: 33 D2                                 xor dx, dx
[ 393]    04BE:                                       left_pl:
[ 394]    04BE: 81 C2 A0 00                           add dx, granica_len
[ 395]    04C2: E2 FA                                 loop left_pl
[ 396]    04C4: 8B FA                                 mov di, dx
[ 397]    04C6: B9 02 00                              mov cx, 2
[ 398]    04C9: FC                                    cld
[ 399]    04CA: F3 AB                                 rep stosw
[ 400]    04CC: 83 FB 17                              cmp bx, 23
[ 401]    04CF: 75 E8                                 jne left
[ 402]        :                                       
[ 403]    04D1: BB 01 00                              mov bx, 1
[ 404]    04D4:                                       right:
[ 405]    04D4: B4 60                                 mov ah, land_color
[ 406]    04D6: B0 20                                 mov al, ' '
[ 407]    04D8: 43                                    inc bx
[ 408]    04D9: 8B CB                                 mov cx, bx
[ 409]    04DB: 33 D2                                 xor dx, dx
[ 410]    04DD:                                       right_pl:
[ 411]    04DD: 81 C2 A0 00                           add dx, granica_len
[ 412]    04E1: E2 FA                                 loop right_pl
[ 413]    04E3: 83 EA 04                              sub dx, 4
[ 414]    04E6: 8B FA                                 mov di, dx
[ 415]    04E8: B9 02 00                              mov cx, 2
[ 416]    04EB: FC                                    cld
[ 417]    04EC: B4 60                                 mov ah, land_color
[ 418]    04EE: B0 20                                 mov al, ' '
[ 419]    04F0: F3 AB                                 rep stosw
[ 420]    04F2: 83 FB 18                              cmp bx, 24
[ 421]    04F5: 75 DD                                 jne right
[ 422]        :                                       
[ 423]        :                                       ;Spawn player
[ 424]    04F7: B3 01                                 mov bl, 1
[ 425]    04F9: B7 60                                 mov bh, land_color
[ 426]    04FB: BA 50 00                              mov dx, granica_len/2
[ 427]    04FE: 33 C0                                 xor ax, ax
[ 428]    0500: B0 04                                 mov al, 04h
[ 429]    0502: B4 6A                                 mov ah, player_color
[ 430]    0504: E8 15 FF                              call SetSymbol
[ 431]    0507: 33 ED                                 xor bp, bp
[ 432]    0509: E8 2C FF                              call ShowScore
[ 433]    050C: 33 F6                                 xor si, si
[ 434]    050E:                                       GameLoop:
[ 435]    050E: 51                                    push cx
[ 436]    050F: E8 03 FF                              call GetSymbol
[ 437]    0512: F6 C4 95                              test ah, 10010101b
[ 438]    0515: 74 07                                 jz short nextStep
[ 439]    0517: 80 FF 60                              cmp bh, land_color
[ 440]    051A: 75 02                                 jne nextStep
[ 441]    051C: 8B F7                                 mov si, di
[ 442]    051E:                                       nextStep:
[ 443]    051E: 52                                    		push dx		
[ 444]    051F: F6 C4 95                              		test ah, 10010101b
[ 445]    0522: 74 04                                 	    jz arrive
[ 446]    0524: B4 FB                                 	    mov ah, player_color_nl
[ 447]    0526: EB 35                                 	    jmp	show_score
[ 448]    0528:                                       arrive:
[ 449]    0528: B4 6A                                 		mov	ah, player_color
[ 450]    052A: 80 FF C0                              		cmp bh, path_color  ;esli pred ne bil pole
[ 451]    052D: 75 2E                                 		jne show_score
[ 452]        :                                       		
[ 453]    052F: 50                                    		push ax
[ 454]    0530: 57                                    		push di
[ 455]    0531: E8 83 FE                              		call fillPath
[ 456]    0534: 52                                    		push dx
[ 457]    0535: 53                                    push bx
[ 458]        :                                       
[ 459]    0536: 8B 16 4C 00                           mov dx, [x]
[ 460]    053A: 8A 1E 4E 00                           mov bl, [y]
[ 461]    053E: E8 C0 FE                              		call fillArea
[ 462]        :                                       		
[ 463]    0541: 8B 16 51 00                           		mov dx, [x2]
[ 464]    0545: 8A 1E 53 00                           		mov bl, [y2]		
[ 465]    0549: E8 B5 FE                              		call fillArea
[ 466]        :                                       		
[ 467]    054C: 5B                                    		pop bx
[ 468]    054D: 5A                                    		pop dx
[ 469]        :                                       		
[ 470]    054E: E8 86 FD                              		call fillBlack
[ 471]    0551: E8 B3 FD                              		call removeFilter
[ 472]        :                                       		
[ 473]    0554: 5F                                    		pop di
[ 474]    0555: 58                                    		pop ax
[ 475]        :                                       		
[ 476]    0556: 01 2E 59 00                           		add [pts], bp
[ 477]    055A: 33 ED                                 		xor bp, bp
[ 478]    055C: 45                                    		inc bp
[ 479]        :                                       	
[ 480]    055D:                                       	show_score:
[ 481]    055D: E8 D8 FE                              	call ShowScore
[ 482]    0560: 81 3E 59 00 4C 04                     	cmp [pts],1100
[ 483]    0566: 72 03                                 	jnae drawPlayer
[ 484]    0568: E9 87 01                              	jmp WIN
[ 485]        :                                       
[ 486]    056B:                                       drawPlayer:
[ 487]    056B: 5A                                    pop dx
[ 488]    056C: B0 04                                 mov al, 04h
[ 489]    056E: E8 AB FE                              call SetSymbol
[ 490]    0571: 52                                    push dx
[ 491]    0572: 53                                    push bx
[ 492]    0573: 50                                    push ax
[ 493]        :                                       
[ 494]    0574:                                       countCoord1:
[ 495]    0574: 8B 16 4C 00                           mov dx, [x]
[ 496]    0578: 8A 1E 4E 00                           mov bl, [y]
[ 497]    057C: 83 FA 00                              cmp dx, 0
[ 498]    057F: 75 02                                 jne notBorder
[ 499]    0581: EB 61                                 jmp printEnemy
[ 500]        :                                       
[ 501]    0583:                                       notBorder:
[ 502]    0583: E8 8F FE                              call GetSymbol
[ 503]    0586: 80 FC 60                              cmp ah, land_color
[ 504]    0589: 75 00                                 jne stillAlive
[ 505]        :                                       
[ 506]    058B:                                       stillAlive:
[ 507]    058B: B0 20                                 mov al, ' '
[ 508]    058D: B4 07                                 mov ah, 00000111b
[ 509]    058F: E8 8A FE                              call SetSymbol
[ 510]    0592: A0 4F 00                              mov al, [d_x]    ;Smeshenie X
[ 511]    0595: 98                                    cbw
[ 512]    0596: 03 D0                                 add dx, ax
[ 513]    0598: 91                                    xchg cx, ax
[ 514]    0599: A0 50 00                              mov al, [d_y]    ;Smeshenie Y
[ 515]    059C: 02 D8                                 add bl, al
[ 516]    059E: 8A F8                                 mov bh, al
[ 517]        :                                       
[ 518]    05A0: E8 72 FE                              call GetSymbol
[ 519]    05A3: 80 FC C0                              cmp ah, path_color
[ 520]    05A6: 75 03                                 jne secondStep
[ 521]    05A8: E9 69 01                              jmp LOSE
[ 522]        :                                       
[ 523]    05AB:                                       secondStep:
[ 524]    05AB: 80 FC FB                              cmp ah,player_color_nl
[ 525]    05AE: 75 03                                 jne thirdStep
[ 526]    05B0: E9 61 01                              jmp LOSE
[ 527]        :                                       
[ 528]        :                                       
[ 529]    05B3:                                       thirdStep:
[ 530]    05B3: 80 FC 07                              cmp ah, 00000111b
[ 531]    05B6: 75 02                                 jne cross
[ 532]    05B8: EB 2A                                 jmp printEnemy
[ 533]    05BA:                                       cross:
[ 534]    05BA: D1 E1                                 shl cx,1
[ 535]    05BC: 2B D1                                 sub dx,cx
[ 536]    05BE: E8 54 FE                              call GetSymbol
[ 537]    05C1: 80 FC 07                              cmp ah, 00000111b
[ 538]    05C4: 74 14                                 jz negdx
[ 539]    05C6: 03 D1                                 add dx,cx
[ 540]    05C8: D0 E7                                 shl bh, 1
[ 541]    05CA: 2A DF                                 sub bl,bh
[ 542]    05CC: E8 46 FE                              call GetSymbol
[ 543]    05CF: 80 FC 07                              cmp  ah, 00000111b
[ 544]    05D2: 74 0C                                 jz negdy
[ 545]    05D4: 2B D1                                 sub dx,cx
[ 546]    05D6: F6 1E 50 00                           neg d_y
[ 547]    05DA:                                       negdx:
[ 548]    05DA: F6 1E 4F 00                           neg d_x
[ 549]    05DE: EB 04                                 jmp printEnemy
[ 550]    05E0:                                       negdy:
[ 551]    05E0: F6 1E 50 00                           neg d_y
[ 552]    05E4:                                       printEnemy:
[ 553]    05E4: 89 16 4C 00                           mov [x], dx
[ 554]    05E8: 88 1E 4E 00                           mov [y], bl
[ 555]    05EC: B0 0F                                 mov al, 0Fh
[ 556]    05EE: B4 0C                                 mov ah, enemy_color
[ 557]    05F0: E8 29 FE                              call SetSymbol
[ 558]    05F3:                                       countCoord2:
[ 559]    05F3: 8B 16 51 00                           mov dx, [x2]
[ 560]    05F7: 8A 1E 53 00                           mov bl, [y2]
[ 561]    05FB: 83 FA 00                              cmp dx, 0
[ 562]    05FE: 75 02                                 jne notBorder2
[ 563]    0600: EB 70                                 jmp popPlayer
[ 564]    0602:                                       notBorder2:
[ 565]    0602: E8 10 FE                              call GetSymbol
[ 566]    0605: 80 FC 60                              cmp ah, land_color
[ 567]    0608: 75 00                                 jne stillAlive2
[ 568]    060A:                                       stillAlive2:
[ 569]    060A: B0 20                                 mov al, ' '
[ 570]    060C: B4 07                                 mov ah, 00000111b
[ 571]    060E: E8 0B FE                              call SetSymbol
[ 572]    0611: A0 54 00                              mov al, [d_x2]    ;Smeshenie po X
[ 573]    0614: 98                                    cbw
[ 574]    0615: 03 D0                                 add dx, ax
[ 575]    0617: 91                                    xchg cx, ax
[ 576]    0618: A0 55 00                              mov al, [d_y2]    ;Smeshenie po Y
[ 577]    061B: 02 D8                                 add bl, al
[ 578]    061D: 8A F8                                 mov bh, al
[ 579]        :                                       
[ 580]    061F: E8 F3 FD                              call GetSymbol
[ 581]    0622: 80 FC C0                              cmp ah, path_color
[ 582]    0625: 75 03                                 jne secondStep2
[ 583]    0627: E9 EA 00                              jmp LOSE
[ 584]        :                                       
[ 585]    062A:                                       secondStep2:
[ 586]    062A: 80 FC FB                              cmp ah,player_color_nl
[ 587]    062D: 75 03                                 jne thirdStep2
[ 588]    062F: E9 E2 00                              jmp LOSE
[ 589]    0632:                                       thirdStep2:
[ 590]    0632: 80 FC 07                              cmp ah, 00000111b
[ 591]    0635: 75 02                                 jne cross2
[ 592]    0637: EB 2A                                 jmp printEnemy2
[ 593]    0639:                                       cross2:
[ 594]    0639: D1 E1                                 shl cx,1
[ 595]    063B: 2B D1                                 sub dx,cx
[ 596]    063D: E8 D5 FD                              call GetSymbol
[ 597]    0640: 80 FC 07                              cmp ah, 00000111b
[ 598]    0643: 74 14                                 jz negdx2
[ 599]    0645: 03 D1                                 add dx,cx
[ 600]    0647: D0 E7                                 shl bh, 1
[ 601]    0649: 2A DF                                 sub bl,bh
[ 602]    064B: E8 C7 FD                              call GetSymbol
[ 603]    064E: 80 FC 07                              cmp  ah, 00000111b
[ 604]    0651: 74 0C                                 jz negdy2
[ 605]    0653: 2B D1                                 sub dx,cx
[ 606]    0655: F6 1E 55 00                           neg d_y2
[ 607]    0659:                                       negdx2:
[ 608]    0659: F6 1E 54 00                           neg d_x2
[ 609]    065D: EB 04                                 jmp printEnemy2
[ 610]    065F:                                       negdy2:
[ 611]    065F: F6 1E 55 00                           neg d_y2
[ 612]        :                                       
[ 613]    0663:                                       printEnemy2:
[ 614]    0663: 89 16 51 00                           mov [x2], dx
[ 615]    0667: 88 1E 53 00                           mov [y2], bl
[ 616]    066B: B0 0F                                 mov al, 0Fh
[ 617]    066D: B4 0C                                 mov ah, enemy_color
[ 618]    066F: E8 AA FD                              call SetSymbol
[ 619]    0672:                                       popPlayer:
[ 620]    0672: 58                                    	pop ax
[ 621]    0673: 5B                                    	pop bx
[ 622]    0674: 5A                                    	pop dx
[ 623]    0675: E8 F0 FD                              	call Pause
[ 624]    0678: F6 C4 90                              	test ah, 10010000b
[ 625]    067B: 74 04                                 	jz  setLandColor
[ 626]    067D: B4 C0                                 	mov ah, path_color
[ 627]    067F: EB 02                                 	jmp delPlayer
[ 628]    0681:                                       setLandColor:
[ 629]    0681: B4 60                                 	mov ah, land_color
[ 630]    0683:                                       delPlayer:
[ 631]    0683: B0 20                                 	mov al, ' '
[ 632]    0685: 8A FC                                 	mov bh, ah
[ 633]    0687: E8 92 FD                              	call SetSymbol
[ 634]    068A: 59                                    	pop cx
[ 635]    068B: 8A CD                                 	mov cl, ch
[ 636]    068D: F6 C4 90                              	test ah, 10010000b  ;na trave moshno prervat dvishenie
[ 637]    0690: 75 02                                 	jnz  click               ;vlevo na pravo
[ 638]    0692: 32 C9                                 	xor cl,cl
[ 639]    0694:                                       click:	
[ 640]    0694: E8 E2 FD                              	call getKey
[ 641]    0697: 80 FD 01                              	cmp ch, esc
[ 642]    069A: 75 03 E9 97 00                        	je exit
[ 643]        :                                       	
[ 644]    069F: 80 FD 48                              	cmp ch, upKey
[ 645]    06A2: 75 0B                                 	jne notUpKey
[ 646]    06A4: 80 FB 01                              	cmp bl, 1
[ 647]    06A7: 76 06                                 	jbe notUpKey
[ 648]    06A9: 80 F9 50                              	cmp cl, downKey
[ 649]    06AC: 74 3F                                 	je  inverseStream
[ 650]    06AE: 4B                                    	dec bx
[ 651]    06AF:                                       notUpKey:
[ 652]    06AF: 80 FD 50                              	    cmp	ch,downKey
[ 653]    06B2: 75 0B                                 		jne	notDownKey
[ 654]    06B4: 80 FB 17                              		cmp	bl, 23		
[ 655]    06B7: 73 06                                 		jae	notDownKey
[ 656]    06B9: 80 F9 48                              		cmp cl, upKey     ;bila li proshlaya up
[ 657]    06BC: 74 2F                                 		je  inverseStream
[ 658]    06BE: 43                                    		inc bx
[ 659]    06BF:                                       	notDownKey:
[ 660]    06BF: 80 FD 4B                              	    cmp ch, leftKey
[ 661]    06C2: 75 0D                                 	    jne notLeftKey
[ 662]    06C4: 83 FA 02                              	    cmp dx, 2
[ 663]    06C7: 76 08                                 	    jbe notLeftKey
[ 664]    06C9: 80 F9 4D                              	    cmp cl, rightKey  ;bila li proshlaya right
[ 665]    06CC: 74 1F                                 	    je  inverseStream
[ 666]    06CE: 83 EA 02                              	    sub dx, 2	
[ 667]    06D1:                                       	notLeftKey:
[ 668]    06D1: 80 FD 4D                              	    cmp	ch,rightKey
[ 669]    06D4: 74 03 E9 35 FE                        		jne GameLoop
[ 670]    06D9: 81 FA 9C 00                           		cmp	dx, 156		
[ 671]    06DD: 72 03 E9 2C FE                        		jnb	GameLoop
[ 672]    06E2: 80 F9 4B                              		cmp cl, leftkey
[ 673]    06E5: 74 06                                 		je inverseStream
[ 674]    06E7: 83 C2 02                              		add dx, 2
[ 675]    06EA: E9 21 FE                              		jmp GameLoop
[ 676]    06ED:                                       	inverseStream:
[ 677]    06ED: 8A E9                                 	mov ch, cl
[ 678]    06EF: E9 1C FE                              	jmp GameLoop
[ 679]        :                                       
[ 680]    06F2:                                       WIN:
[ 681]    06F2: B8 03 00                              mov ax, 0003h
[ 682]    06F5: CD 10                                 int 10h
[ 683]        :                                       
[ 684]    06F7: BF C6 07                              mov di, 07C6h
[ 685]    06FA: BE 12 00                              mov si, offset game_win
[ 686]    06FD: B9 09 00                              mov cx, 9
[ 687]    0700: F3 A5                                 rep movsw
[ 688]    0702: 8B 3E 4A 00                           mov di, e_offset
[ 689]    0706: BE 24 00                              mov si, offset e_message
[ 690]    0709: B9 13 00                              mov cx, 19
[ 691]    070C: F3 A5                                 rep movsw
[ 692]        :                                       
[ 693]    070E: B4 01                                 mov ah, 1
[ 694]    0710: CD 21                                 int 21h
[ 695]        :                                       
[ 696]    0712: EB 22                                 jmp exit
[ 697]        :                                       
[ 698]    0714:                                       LOSE:
[ 699]    0714: B8 03 00                              mov ax, 0003h
[ 700]    0717: CD 10                                 int 10h
[ 701]        :                                       
[ 702]    0719: BF C6 07                              mov di, 07C6h
[ 703]    071C: BE 00 00                              mov si, offset game_over
[ 704]    071F: B9 09 00                              mov cx, 9
[ 705]    0722: F3 A5                                 rep movsw
[ 706]    0724: 8B 3E 4A 00                           mov di, e_offset
[ 707]    0728: BE 24 00                              mov si, offset e_message
[ 708]    072B: B9 13 00                              mov cx, 19
[ 709]    072E: F3 A5                                 rep movsw
[ 710]        :                                       
[ 711]    0730: B4 01                                 mov ah, 1
[ 712]    0732: CD 21                                 int 21h
[ 713]        :                                       
[ 714]    0734: EB 00                                 jmp exit
[ 715]    0736:                                       exit:
[ 716]    0736: B8 03 00                              mov ax, 0003h
[ 717]    0739: CD 10                                 int 10h
[ 718]    073B: B8 00 4C                              mov ax, 4c00h ; exit to operating system.
[ 719]    073E: CD 21                                 int 21h
[ 720]        :                                       end start
[ 721]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 40      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 05      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 56      -   SP - stack pointer (l.byte)
0011: 02      -   SP - stack pointer (h.byte)
0012: C8      -   check sum (l.byte)
0013: AC      -   check sum (h.byte)
0014: C6      -   IP - instruction pointer (l.byte)
0015: 01      -   IP - instruction pointer (h.byte)
0016: 2C      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: C7      -   relocation table - offset inside segment (l.byte)
001F: 01      -   relocation table - offset inside segment (h.byte)
0020: 2C      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
