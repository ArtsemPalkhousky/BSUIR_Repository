			Операции

mov - перемещает значение второго операнда в первый
mov ax, 1234h (AX = 1234h. AH = 12h, AL = 34h)


add - второе значение добавляет к 1-ому 
mov ax, 10000 (ax = 10000)
add ax, 25000 (ax = 35000)


Комманда прерывания  (Для вывода строки)
AH = 09h
DX = адресс строки, заканчивающийся  '$' (ASCII 24H)


Комманды проверки флагов 
JZ (jump zero)		JNZ
JC, JB, JNAE		JNC
JO (jump overflow)			JNO
JPE, JP			JNP

.model tiny
.code
ORG    100ЙФh
	/1
start:	
  MOV AH, 7
  CMP AH, 7    ;ZF = 1
  JZ  ZF_1
  JMP ZF_0
	
ZF_1:          ;Если ZF = 1, то 
  MOV AH, 1    ;в AH запишем 1
ZF_0:          ;Если ZF = 0, то 
  MOV AH, 0    ;в AH запишем 0
  
  RET

END	start



Микропроцессор аппаратно поддерживает несколько моделей использования оперативной памяти:
·      сегментированную модель
·      страничную модель



БАЙт -> СЛОВО(2 байта) -> ДВОЙНОЕ СЛОВО(2 СЛОВА 4 байта) -> УЧЕТВЕРЕННОЕ СЛОВО(8 байт)

12345678h
78h
56h
34h
12h
		Сегментная организация памяти
Комманды модуля в заданном порядке выбираются из модуля и выполняются (так же с данными)
Посколкьу для адрессации данных 8086 использует 16-битные
Для того чтобы получить полный адрес к содержимому сегментных регистров достаточно справа дописать шестнадцатиричый нуль
Физ адресс некоторого элемента в памяти (порядковый номер первого байта элемента) определяется суммой значения заданного
в СЕГМЕНТНОМ регистре со значением, которое мы называем смещением.
Смещение - определяет порядковый номер первого байта элемента от начала памяти
Это значение может хранится в одном из регистров.

Суммирование происходит след. образом:
Микропроцессор расширяет содержимое регистра, добавляя в нему 4 младших нулевых бита. При этом адресс становится 20-битным
Затем прибавляет к младшим 16-ти битам значение смещение. Полученный 20-битный результат представляет абсолютный или физ. адресс


1.Неосредственная адрессация
mov AX, 1234h
 В данном случае в этой комманде операнд является частью команды

2.Прямая адрессация
mov AX, my_label
 Смещение данного является частью команды


3. Регистровая адрессация
mov AX, BX размер регистров должен совпадать
 

4. Косвенная Регистровая адрессация
mov AX, [BX] (читается значение из BX которое расматривается как смещение памяти в сегменте данных.
по полученному смещению из памяти будет выбрано слово и записано в регистр AX)
 Смещение данного находится в одном из регитстров BX, SI, DI

Префикс замены.
mov AX, CS:[BX] (значение будет)


5. Относительная косвенная регистровая адрессация
Смещение данного вычисляется как сумма смещения в команде и значения одного из регистров.
 mov AX, [BX + 10]
 mov AX, [BX] + 10
 mov AX, 10 [BX]


6. Базовая индексная адрессация
 mov AX, my_array[BX][SI]


7. Неявная адрессация
 Кодовая адрессация 