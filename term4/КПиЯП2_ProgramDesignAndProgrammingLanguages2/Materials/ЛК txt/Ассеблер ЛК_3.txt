					Организация стека

Стек это оперативной область памяти
Которая использует механизм безадрессной адрессации и выборки данных
Работа по принципу LIFO

Адресс сегмента SS
Для 8086 данные в стек помещаются в виде слова

Пара регистров SS:SP ВСЕГДА хранит текущий адресс вершины стека

	Для занесения слова в стек используется комманда PUSH
Сначала смещение в SP уменьшается на 2 а затем производится запись слова в стек
УМЕНЬШАЕТСЯ, т.к. стек растет от старших битов к младшим.

	Для извлечения используется POP
При этом сначала производится чтение значений из стека, а затем SP+=2
Важно помнить что стек растет в направлении к началу памяти и уменьшается в направлении к ее концу

Стек предназначен для временного хранения переменных, передачи параметров для передачи
и для сохранения адрессов возврата адрессов процедур и прерываний
		
			
					Организация прерываний


При остановке выполнения текущей программы  запуска другой программы - программы обработчика специально написанной для некоторой ситуации
Такие особые ситуации - прерывания. 
	
				Внешние прерывания 	 Внутренние прерывания
	
	Внешние происходят когда устр-ва подключенные к процессору сами генерируют сигнал прерывания
	
	Внутренние - исходят от процессора исходят в 2 случаях
	1. В результате выполнения программой INT 
	2. При определенных условиях, например, при делении на 0.
Каждому прерыванию ставится в соответствие 4-ёхбайтный Вектор.	 Номера прерываний 0 N 256
Все векторы размещаются по порядку в младшем килобайте памяти
И образуют таблицу векторов прерываний
Эта таблица нах-ся по нулевому адрессу оперативной памяти и инициализируется при загрузке системы 
0000:0000h
	
	Любой из векторов прерывания задает точку входа Или СТАРТОВЫЙ адресс соотв. программы для обслуживания прерывания
И представляется в виде СегментПрограммы_Смещение(2 байта сегмент(в старшем слове), 2 байта смещение (в младшем))
Адресс вектора прерывания нах-ся путем умножения номера прерывания умножения на 4 

	Необходимо предусмотреть 
Для этого перед обращением к прерыванию должны быть сохранены значения всех регистров и флагов, которые исп-ся процедурой обслуживания прерывания
А после завершения прерывания эти регистры должны быть востановлены
 
	
	Рассмотрим действия, которые должны быть выполнены при использовании прерывания
 	
	1. На вход микропроцессора поступает сигнал Прерывания
	2. Далее возможен один из 3 вариантов
	а) завершается завершение текущей команды (наиболее распр-н)
	б) ожидается завершение след команды
	в) запрос обрабатывается во время выполнения текущей команды
	. В результате микропроцессор вырабатывает 2 сигнала потверждения прерывания
	3. По шине адрессов slash\данных в микропроцессор передается байт с номер прерывания N
	4. Текущее содержимое регистров флагов, а также текущее содержимое SI:IP загружаются в стек
		заметим что смещение IP содержит смещение кодовой комманды перед которой возникло прерывание
 	5. Сбрасываются фалги IF TF, чтобы запретить
	6. В регистре CS и IP загружается содержимое вектора N
	7. Выполняется программа обработки прерывания. В конце программы всегда нах-ся команда iret, которая ВОСТАНАВЛИВАЕТ СТАРЫЕ ЗНАЧЕНИЯ РЕГИСТРОВ ФЛАГОВ, CS IP
	8. Прерванная программа продолжает свое выполнение


				Простейшая директива определения сегмента
	Например
	
	.MODEL	-  позволяет задать модель памяти для Ассемблерной памяти (должна стоять первой)
	каждая модель памяти фиксирует определенный способ адрессации данных и команд.
	Различают ближний и дальний способы адрессации
	При выборе БЛИЖНЕГО - значение сегментного адресса данных или команд не изм-ся
	Поэтому изменение адресса сводится только к изменению смещения
	При ДАЛЬНЕМ способе адрессации изм-ие адресса закл-ся в изм-ии и адресса и смещения
	
		Модели памяти: 
		1.TINY - минимальная и код и данные размещаются в одном сегменте не более 64 кб COM
		2.SMALL - малая: код - 1 сегмент, данные - 1 сегмент. Стек тоже нужно объявлять EXE
		3.MEDIUM - данные не больше 1 сегмента, код - несколько сегментов
		4.COMPACT - данные - несколько сегментов, код - не более 1 
		5.LARGE - и код и данные в нескольких сегментах
 				
	.STACK  - позволяет задать размер стека
	например .STACK 100h - 256 байт под стек

	.DATA - задает начало сегмента данных программы, соотв. сегментный адрес помещается предопределенный символ @data
	mov ax, @data
	mov ds, ax

	.CODE - адресс начала сегмента кода
	.DATA?
	.FARDATA - аналагично @fardata
	.CONST - отдельный сегмент для констант
	.GROUP	
	.DOSSEG - опр-ет порядок в MS Dos
	порядок опр-ся так, как в программе размещены команды