// двунаправленная очередь
#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <string.h>
struct zap
{
	char inf[50];
	zap *pr;   // указатель на предыд. эл-т
	zap *nx;   // указатель на следующ. эл-т
};
void add(zap **, zap **);
void insert(zap **);
void del_any(zap **, zap **, char *);
void see(zap *, int);
void sort(zap **, zap **);

int main()
{
	setlocale(LC_ALL, "Russian");
	zap *t, *h;         // указатели на хвост и голову очереди
	char l, *st;
	st = (char *)malloc(10);
	t = h = nullptr;
	while (1)
	{
		puts("вид операции: 1-создать очередь");
		puts("              2-вывод содержимого очереди");
		puts("              3-вставка нового элемента в очередь");
		puts("              4-удаление любого элемента из очереди");
		puts("              5-сортировка очереди");
		puts("              0-окончить");
		fflush(stdin);
		switch (getch())
		{
		case '1': add(&t, &h); break;
		case '2':
			puts("0-просмотр с хвоста\n1- просмотр с головы");
			l = getch();
			if (l == '0') see(t, 0);  // просмотр с хвоста очереди
			else see(h, 1);        // просмотр с головы очереди
			break;
		case '3': if (t)         // очередь не пуста
			insert(&t);           // добавление от хвоста очереди
			break;
		case '4': if (t)
		{
					  gets(st);
					  del_any(&t, &h, st);
		} break;
		case '5': if (t) sort(&t, &h); break;
		case '0': return 0;
		default: printf("Ошибка, повторите \n");
		}
	}
}

// функция создания очереди  и добавления (только) в хвост очереди
void add(zap **pt, zap **ph)
{
	zap *n;
	puts("Создание очереди \n");
	do
	{
		if (!(n = (zap *)calloc(1, sizeof(zap))))
		{
			puts("Нет свободной памяти");
			return;
		}
		puts("Введите информацию в inf");
		scanf("%s", n->inf);
		if (!*pt || !*ph)   // очередь еще не создана
		{
			*pt = n;          // указатель на хвост очереди
			*ph = n;          // указатель на голову очереди
		}
		else
		{
			n->nx = *pt;     // указатель на элемент (хвост) очереди
			(*pt)->pr = n;   // хвост указывает на новый элемент
			*pt = n;         // передвигаем указатель хвоста на новый элемент
		}
		puts("Продолжить (y/n): ");
		fflush(stdin);
	} while (getch() == 'y');
}

// функция вывода содержимого очереди
// вывод начинать с хвоста (i==0) или головы (i==1)
void see(zap *p, int i)
{
	puts("Вывод содержимого очереди \n");
	if (!p)
	{
		puts("Очередь пуста");
		return;
	}
	do
	{
		printf("%s\n", p->inf);
		if (!i) p = p->nx;  // движение к голове очереди
		else p = p->pr;    // движение к хвосту очереди
	} while (p);
	return;
}

// функция добавления элемента в очередь  (до головы очереди)
// добавление работает правильно только если очередь упорядочена
// с хвоста по возрастанию  [ (хвост) 1 2 5 7 9 (голова)  вставить 4 ]
void insert(zap **ptr)
{
	zap *p = *ptr, *n;
	char s[50];
	puts("Введите информацию в для добавления\n");
	gets(s);
	while (p && strcmp(p->inf, s)<0) p = p->nx;
	if (!(n = (zap *)calloc(1, sizeof(zap))))
	{
		puts("Нет свободной памяти");
		return;
	}
	strcpy(n->inf, s);       // копирует s n->inf
	p->pr->nx = n;    // предыдущий эл-т очереди указывает на вводимый эл-т (n)
	n->nx = p;        // новый элемент указывает на последующ. элемент очереди p
	n->pr = p->pr;	  // новый элемент указывает на предыдующ. элемент очереди p
	p->pr = n;        // последующий эл-т очереди указывает на вводимый эл-т
}

// функция удаления любого одного элемента очереди
// pt- указатель на хвост  ph- на голову очереди
void del_any(zap **pt, zap **ph, char *st)
{
	zap *p = *pt;
	if (!*pt || !*ph)
	{
		puts("Очередь пуста");
		return;
	}
	if (p->nx == NULL &&       // в очереди только один элемент
		(!strcmp(p->inf, st) || *st == '\0'))
	{
		free(p);
		*pt = *ph = nullptr;       // очередь пуста
		return;
	}
	while (p && strcmp(p->inf, st)) p = p->nx;
	if (!strcmp(p->inf, st))  // найден элемент со строкой  st
	{
		if (p == *pt)             // удаляемая вершина - хвост очереди
		{
			*pt = (*pt)->nx;       // новый указатель на хвост очереди
			(*pt)->pr = nullptr;
		}
		else if (p == *ph)        // удаляемая вершина - голова очереди
		{
			*ph = (*ph)->pr;      // новый указатель на голову очереди
			(*ph)->nx = nullptr;
		}
		else
		{
			p->pr->nx = p->nx;     // обходим элемент  pr
			p->nx->pr = p->pr;
		}
		free(p);                // удаляем элемент  pr  очереди
	}
}

// функция сортировки содержимого очереди
void sort(zap **t, zap **h)
{
	zap *s1, *s2, *s3;

	for (s2 = *h; s2; s2 = s2->pr)
	for (s1 = *t; s1->nx; s1 = s1->nx)
	{
		if (strcmp(s1->nx->inf, s1->inf)>0)
		{
			s3 = s1->nx;                   // s3- вершина следующая за s1
			if (!s1->pr) *t = s1->nx;       // модификация хвоста очереди
			s1->nx = s1->nx->nx;           // s1-nx указывает через вершину
			if (s1->nx) s1->nx->pr = s1;    // s1->nx выше был модифицирован
			else s2 = *h = s1;               // s1->nx==NULL -коррекция головы
			s3->pr = s1->pr;
			s3->nx = s1;
			if (s3->pr) s3->pr->nx = s3;
			s1->pr = s3;
			s1 = s1->pr;                   // откат для s1=s1->nx в цикле for
		}
	}
	puts("Сортировка выполнена");
}
