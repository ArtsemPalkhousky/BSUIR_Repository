#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#include <stdio.h>
#include <stdlib.h>
/* —оздать очередь из чисел введенных пользователем. 
¬ывести на экран.
Ќайти максимальный.
удалить все элементы до/после максимального */

struct FIFO {
	int data;
	struct FIFO *next;
};
struct FIFO * create(struct FIFO *, int);
//void create(struct FIFO **, struct FIFO **, int);  
//struct FIFO *pop (struct FIFO *);
void pop(struct FIFO **, struct FIFO **);
void print(struct FIFO *); // просмотр очереди
struct FIFO *max(struct FIFO * head); //поиск максимального

int main() {
	int i, a, k;
	struct FIFO *head;    
	head = NULL;
	struct FIFO *tail;    
	tail = NULL;
	head=tail;

	while (scanf("%d", &a))
	{
		
		//create(&head, &tail, i);
		tail=create(tail,a);
		if (head== NULL)
			head=tail;
	}
		
	printf("\n");
	print(head);

	//удаление до максимального
	/*struct FIFO * tmp = max(head);
	while (head!=tmp)
		pop(&head,&tail);*/

	//удаление после максимального
	struct FIFO * tmp = max(head);
	tail=tmp;
	tail->next=NULL;
	if (tail==NULL)
		head=NULL;
	
	printf("\n");
	print(head);
	free(head);
}

struct FIFO * create(struct FIFO *tail, int x) {
	struct FIFO *n;    // указатель на новую структуру
	n = (struct FIFO *)malloc(sizeof(struct FIFO)); // выдел€ем пам€ть
	n->next = NULL;
	n->data = x;
	if (tail == NULL)	
	{
		tail= n;
	}
	else
	{
		tail->next=n;
		tail=n;
	}
	return tail;
}

//void create(struct FIFO **head, struct FIFO **tail, int x) {
//	struct FIFO *n;    // указатель на новую структуру
//	n = (struct FIFO *)malloc(sizeof(struct FIFO)); // выдел€ем пам€ть
//	n->next = NULL;
//	n->data = x;
//	if (*head == NULL)	
//	{
//		*head = n;
//		*tail = n;
//	}
//	else
//	{
//		(*tail)->next=n;
//		*tail=n;
//	}
//	
//}


void print(struct FIFO *head){
	struct FIFO *p = head;
	while (p != NULL) {      
		printf("%2d ---> ", p->data);
		p = p->next;       // продвижение по списку
	}
	printf("\n");
}

//struct FIFO *pop(struct FIFO * head)
//{
//	if (head != NULL)
//	{
//		head = head->next;
//		return head;
//	}
//	else return NULL;
//
//}

void pop(struct FIFO **head, struct FIFO ** tail)
{
	if (*head != NULL)
	{
		*head = (*head)->next;
		
	}
	else 
	{
		*tail=NULL;
	}

}
struct FIFO *max(struct FIFO * head)
{
	struct FIFO *p = head, *ptr_max=head;
	int max=p->data;
	while (p != NULL) {      
		if (max < p->data)
		{
			max = p->data;
			ptr_max = p;
		}
		p = p->next;       // продвижение по списку
	}
	printf("\n%d\n", max);
	return ptr_max;

}

